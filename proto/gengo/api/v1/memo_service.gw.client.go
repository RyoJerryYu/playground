// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: api/v1/memo_service.proto

package apiv1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	url "net/url"
)

// MemoServiceGatewayClient is the interface for MemoService service client.
type MemoServiceGatewayClient interface {
	// CreateMemo creates a memo.
	CreateMemo(context.Context, *CreateMemoRequest) (*Memo, error)
	// ListMemos lists memos with pagination and filter.
	ListMemos(context.Context, *ListMemosRequest) (*ListMemosResponse, error)
	// GetMemo gets a memo.
	GetMemo(context.Context, *GetMemoRequest) (*Memo, error)
	// GetMemoByUid gets a memo by uid
	GetMemoByUid(context.Context, *GetMemoByUidRequest) (*Memo, error)
	// UpdateMemo updates a memo.
	UpdateMemo(context.Context, *UpdateMemoRequest) (*Memo, error)
	// DeleteMemo deletes a memo.
	DeleteMemo(context.Context, *DeleteMemoRequest) (*emptypb.Empty, error)
	// RenameMemoTag renames a tag for a memo.
	RenameMemoTag(context.Context, *RenameMemoTagRequest) (*emptypb.Empty, error)
	// DeleteMemoTag deletes a tag for a memo.
	DeleteMemoTag(context.Context, *DeleteMemoTagRequest) (*emptypb.Empty, error)
	// SetMemoResources sets resources for a memo.
	SetMemoResources(context.Context, *SetMemoResourcesRequest) (*emptypb.Empty, error)
	// ListMemoResources lists resources for a memo.
	ListMemoResources(context.Context, *ListMemoResourcesRequest) (*ListMemoResourcesResponse, error)
	// SetMemoRelations sets relations for a memo.
	SetMemoRelations(context.Context, *SetMemoRelationsRequest) (*emptypb.Empty, error)
	// ListMemoRelations lists relations for a memo.
	ListMemoRelations(context.Context, *ListMemoRelationsRequest) (*ListMemoRelationsResponse, error)
	// CreateMemoComment creates a comment for a memo.
	CreateMemoComment(context.Context, *CreateMemoCommentRequest) (*Memo, error)
	// ListMemoComments lists comments for a memo.
	ListMemoComments(context.Context, *ListMemoCommentsRequest) (*ListMemoCommentsResponse, error)
	// ListMemoReactions lists reactions for a memo.
	ListMemoReactions(context.Context, *ListMemoReactionsRequest) (*ListMemoReactionsResponse, error)
	// UpsertMemoReaction upserts a reaction for a memo.
	UpsertMemoReaction(context.Context, *UpsertMemoReactionRequest) (*Reaction, error)
	// DeleteMemoReaction deletes a reaction for a memo.
	DeleteMemoReaction(context.Context, *DeleteMemoReactionRequest) (*emptypb.Empty, error)
}

func NewMemoServiceGatewayClient(c gateway.Client) MemoServiceGatewayClient {
	return &memoServiceGatewayClient{
		gwc: c,
	}
}

type memoServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *memoServiceGatewayClient) CreateMemo(ctx context.Context, req *CreateMemoRequest) (*Memo, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/memos")
	gwReq.SetBody(req)
	return gateway.DoRequest[Memo](ctx, gwReq)
}

func (c *memoServiceGatewayClient) ListMemos(ctx context.Context, req *ListMemosRequest) (*ListMemosResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/memos")
	q := url.Values{}
	q.Add("pageSize", fmt.Sprintf("%v", req.PageSize))
	q.Add("pageToken", fmt.Sprintf("%v", req.PageToken))
	q.Add("filter", fmt.Sprintf("%v", req.Filter))
	q.Add("view", req.View.String())
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListMemosResponse](ctx, gwReq)
}

func (c *memoServiceGatewayClient) GetMemo(ctx context.Context, req *GetMemoRequest) (*Memo, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=memos/*}")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[Memo](ctx, gwReq)
}

func (c *memoServiceGatewayClient) GetMemoByUid(ctx context.Context, req *GetMemoByUidRequest) (*Memo, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/memos:by-uid/{uid}")
	gwReq.SetPathParam("uid", fmt.Sprintf("%v", req.Uid))
	return gateway.DoRequest[Memo](ctx, gwReq)
}

func (c *memoServiceGatewayClient) UpdateMemo(ctx context.Context, req *UpdateMemoRequest) (*Memo, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/{memo.name=memos/*}")
	gwReq.SetBody(req.Memo)
	return gateway.DoRequest[Memo](ctx, gwReq)
}

func (c *memoServiceGatewayClient) DeleteMemo(ctx context.Context, req *DeleteMemoRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/{name=memos/*}")
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}

func (c *memoServiceGatewayClient) RenameMemoTag(ctx context.Context, req *RenameMemoTagRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/{parent=memos/*}/tags:rename")
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}

func (c *memoServiceGatewayClient) DeleteMemoTag(ctx context.Context, req *DeleteMemoTagRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/{parent=memos/*}/tags/{tag}")
	gwReq.SetPathParam("tag", fmt.Sprintf("%v", req.Tag))
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}

func (c *memoServiceGatewayClient) SetMemoResources(ctx context.Context, req *SetMemoResourcesRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/{name=memos/*}/resources")
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}

func (c *memoServiceGatewayClient) ListMemoResources(ctx context.Context, req *ListMemoResourcesRequest) (*ListMemoResourcesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=memos/*}/resources")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListMemoResourcesResponse](ctx, gwReq)
}

func (c *memoServiceGatewayClient) SetMemoRelations(ctx context.Context, req *SetMemoRelationsRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/{name=memos/*}/relations")
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}

func (c *memoServiceGatewayClient) ListMemoRelations(ctx context.Context, req *ListMemoRelationsRequest) (*ListMemoRelationsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=memos/*}/relations")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListMemoRelationsResponse](ctx, gwReq)
}

func (c *memoServiceGatewayClient) CreateMemoComment(ctx context.Context, req *CreateMemoCommentRequest) (*Memo, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/{name=memos/*}/comments")
	gwReq.SetBody(req.Comment)
	return gateway.DoRequest[Memo](ctx, gwReq)
}

func (c *memoServiceGatewayClient) ListMemoComments(ctx context.Context, req *ListMemoCommentsRequest) (*ListMemoCommentsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=memos/*}/comments")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListMemoCommentsResponse](ctx, gwReq)
}

func (c *memoServiceGatewayClient) ListMemoReactions(ctx context.Context, req *ListMemoReactionsRequest) (*ListMemoReactionsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=memos/*}/reactions")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListMemoReactionsResponse](ctx, gwReq)
}

func (c *memoServiceGatewayClient) UpsertMemoReaction(ctx context.Context, req *UpsertMemoReactionRequest) (*Reaction, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/{name=memos/*}/reactions")
	gwReq.SetBody(req)
	return gateway.DoRequest[Reaction](ctx, gwReq)
}

func (c *memoServiceGatewayClient) DeleteMemoReaction(ctx context.Context, req *DeleteMemoReactionRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/reactions/{reaction_id}")
	gwReq.SetPathParam("reaction_id", fmt.Sprintf("%v", req.ReactionId))
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}
