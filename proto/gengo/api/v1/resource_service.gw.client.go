// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: api/v1/resource_service.proto

package apiv1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	url "net/url"
)

// ResourceServiceGatewayClient is the interface for ResourceService service client.
type ResourceServiceGatewayClient interface {
	// CreateResource creates a new resource.
	CreateResource(context.Context, *CreateResourceRequest) (*Resource, error)
	// ListResources lists all resources.
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	// GetResource returns a resource by name.
	GetResource(context.Context, *GetResourceRequest) (*Resource, error)
	// GetResourceByUid returns a resource by uid.
	GetResourceByUid(context.Context, *GetResourceByUidRequest) (*Resource, error)
	// GetResourceBinary returns a resource binary by name.
	GetResourceBinary(context.Context, *GetResourceBinaryRequest) (*httpbody.HttpBody, error)
	// UpdateResource updates a resource.
	UpdateResource(context.Context, *UpdateResourceRequest) (*Resource, error)
	// DeleteResource deletes a resource by name.
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
}

func NewResourceServiceGatewayClient(c gateway.Client) ResourceServiceGatewayClient {
	return &resourceServiceGatewayClient{
		gwc: c,
	}
}

type resourceServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *resourceServiceGatewayClient) CreateResource(ctx context.Context, req *CreateResourceRequest) (*Resource, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/resources")
	gwReq.SetBody(req.Resource)
	return gateway.DoRequest[Resource](ctx, gwReq)
}

func (c *resourceServiceGatewayClient) ListResources(ctx context.Context, req *ListResourcesRequest) (*ListResourcesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/resources")
	return gateway.DoRequest[ListResourcesResponse](ctx, gwReq)
}

func (c *resourceServiceGatewayClient) GetResource(ctx context.Context, req *GetResourceRequest) (*Resource, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=resources/*}")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[Resource](ctx, gwReq)
}

func (c *resourceServiceGatewayClient) GetResourceByUid(ctx context.Context, req *GetResourceByUidRequest) (*Resource, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/resources:by-uid/{uid}")
	gwReq.SetPathParam("uid", fmt.Sprintf("%v", req.Uid))
	return gateway.DoRequest[Resource](ctx, gwReq)
}

func (c *resourceServiceGatewayClient) GetResourceBinary(ctx context.Context, req *GetResourceBinaryRequest) (*httpbody.HttpBody, error) {
	gwReq := c.gwc.NewRequest("GET", "/file/{name=resources/*}/{filename}")
	gwReq.SetPathParam("filename", fmt.Sprintf("%v", req.Filename))
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	q.Add("thumbnail", fmt.Sprintf("%v", req.Thumbnail))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[httpbody.HttpBody](ctx, gwReq)
}

func (c *resourceServiceGatewayClient) UpdateResource(ctx context.Context, req *UpdateResourceRequest) (*Resource, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/{resource.name=resources/*}")
	gwReq.SetBody(req.Resource)
	return gateway.DoRequest[Resource](ctx, gwReq)
}

func (c *resourceServiceGatewayClient) DeleteResource(ctx context.Context, req *DeleteResourceRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/{name=resources/*}")
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}
