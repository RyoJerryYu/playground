//Code generated by protoc-gen-enumx. DO NOT EDIT.
//versions:
//- protoc-gen-enumx v1.0.7
//- protoc (unknown)
//source: api/v1/memos/memo_service.proto

package memos

import (
	constraints "golang.org/x/exp/constraints"
)

func (x Visibility) Int() int       { return int(x) }
func (x Visibility) Int64() int64   { return int64(x) }
func (x Visibility) Int32() int32   { return int32(x) }
func (x Visibility) UInt() uint     { return uint(x) }
func (x Visibility) UInt64() uint64 { return uint64(x) }
func (x Visibility) UInt32() uint32 { return uint32(x) }

// VisibilityFrom returns the Visibility for the given integers, or the zero value if not found.
func VisibilityFrom[T constraints.Integer | constraints.Float](s T) Visibility {
	return Visibility(s)
}

// VisibilityFromValid is like VisibilityFrom, but returns an extra boolean value to check if the conversion is valid.
func VisibilityFromValid[T constraints.Integer | constraints.Float](s T) (Visibility, bool) {
	_, valid := Visibility_name[int32(s)]
	return Visibility(s), valid
}

// VisibilityFromStr returns the Visibility for the given string, or the zero value if not found.
func VisibilityFromStr(s string) Visibility {
	return Visibility(Visibility_value[s])
}

// VisibilityFromValidStr is like VisibilityFromStr, but returns an extra boolean value to check if the conversion is valid.
func VisibilityFromValidStr(s string) (Visibility, bool) {
	v, valid := Visibility_value[s]
	return Visibility(v), valid
}

var _Visibility_all = []Visibility{
	Visibility_VISIBILITY_UNSPECIFIED,
	Visibility_PRIVATE,
	Visibility_PROTECTED,
	Visibility_PUBLIC,
}
var _Visibility_allName = []string{
	"Visibility_VISIBILITY_UNSPECIFIED",
	"Visibility_PRIVATE",
	"Visibility_PROTECTED",
	"Visibility_PUBLIC",
}
var _Visibility_allValue = []int32{
	0,
	1,
	2,
	3,
}

// VisibilityAll returns all the values of the Visibility enum.
func VisibilityAll() []Visibility {
	return _Visibility_all[:]
}

// VisibilityAllName returns all the names of the Visibility enum.
func VisibilityAllName() []string {
	return _Visibility_allName[:]
}

// VisibilityAllValue returns all the values of the Visibility enum.
func VisibilityAllValue() []int32 {
	return _Visibility_allValue[:]
}

func (x MemoView) Int() int       { return int(x) }
func (x MemoView) Int64() int64   { return int64(x) }
func (x MemoView) Int32() int32   { return int32(x) }
func (x MemoView) UInt() uint     { return uint(x) }
func (x MemoView) UInt64() uint64 { return uint64(x) }
func (x MemoView) UInt32() uint32 { return uint32(x) }

// MemoViewFrom returns the MemoView for the given integers, or the zero value if not found.
func MemoViewFrom[T constraints.Integer | constraints.Float](s T) MemoView {
	return MemoView(s)
}

// MemoViewFromValid is like MemoViewFrom, but returns an extra boolean value to check if the conversion is valid.
func MemoViewFromValid[T constraints.Integer | constraints.Float](s T) (MemoView, bool) {
	_, valid := MemoView_name[int32(s)]
	return MemoView(s), valid
}

// MemoViewFromStr returns the MemoView for the given string, or the zero value if not found.
func MemoViewFromStr(s string) MemoView {
	return MemoView(MemoView_value[s])
}

// MemoViewFromValidStr is like MemoViewFromStr, but returns an extra boolean value to check if the conversion is valid.
func MemoViewFromValidStr(s string) (MemoView, bool) {
	v, valid := MemoView_value[s]
	return MemoView(v), valid
}

var _MemoView_all = []MemoView{
	MemoView_MEMO_VIEW_UNSPECIFIED,
	MemoView_MEMO_VIEW_FULL,
	MemoView_MEMO_VIEW_METADATA_ONLY,
}
var _MemoView_allName = []string{
	"MemoView_MEMO_VIEW_UNSPECIFIED",
	"MemoView_MEMO_VIEW_FULL",
	"MemoView_MEMO_VIEW_METADATA_ONLY",
}
var _MemoView_allValue = []int32{
	0,
	1,
	2,
}

// MemoViewAll returns all the values of the MemoView enum.
func MemoViewAll() []MemoView {
	return _MemoView_all[:]
}

// MemoViewAllName returns all the names of the MemoView enum.
func MemoViewAllName() []string {
	return _MemoView_allName[:]
}

// MemoViewAllValue returns all the values of the MemoView enum.
func MemoViewAllValue() []int32 {
	return _MemoView_allValue[:]
}
