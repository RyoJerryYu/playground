// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/memos/memo_service.proto

package memos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/RyoJerryYu/playground/proto/gengo/api/v1/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.RowStatus(0)
)

// Validate checks the field values on Memo with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Memo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Memo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemoMultiError, or nil if none found.
func (m *Memo) ValidateAll() error {
	return m.validate(true)
}

func (m *Memo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for RowStatus

	// no validation rules for Creator

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDisplayTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "DisplayTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "DisplayTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisplayTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoValidationError{
				field:  "DisplayTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemoValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Visibility

	// no validation rules for Pinned

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemoValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemoValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetReactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Reactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  fmt.Sprintf("Reactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemoValidationError{
					field:  fmt.Sprintf("Reactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetProperty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "Property",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoValidationError{
					field:  "Property",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoValidationError{
				field:  "Property",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Snippet

	if m.Parent != nil {
		// no validation rules for Parent
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemoValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemoValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemoMultiError(errors)
	}

	return nil
}

// MemoMultiError is an error wrapping multiple validation errors returned by
// Memo.ValidateAll() if the designated constraints aren't met.
type MemoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoMultiError) AllErrors() []error { return m }

// MemoValidationError is the validation error returned by Memo.Validate if the
// designated constraints aren't met.
type MemoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoValidationError) ErrorName() string { return "MemoValidationError" }

// Error satisfies the builtin error interface
func (e MemoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoValidationError{}

// Validate checks the field values on MemoProperty with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemoProperty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoProperty with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemoPropertyMultiError, or
// nil if none found.
func (m *MemoProperty) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoProperty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasLink

	// no validation rules for HasTaskList

	// no validation rules for HasCode

	// no validation rules for HasIncompleteTasks

	if len(errors) > 0 {
		return MemoPropertyMultiError(errors)
	}

	return nil
}

// MemoPropertyMultiError is an error wrapping multiple validation errors
// returned by MemoProperty.ValidateAll() if the designated constraints aren't met.
type MemoPropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoPropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoPropertyMultiError) AllErrors() []error { return m }

// MemoPropertyValidationError is the validation error returned by
// MemoProperty.Validate if the designated constraints aren't met.
type MemoPropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoPropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoPropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoPropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoPropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoPropertyValidationError) ErrorName() string { return "MemoPropertyValidationError" }

// Error satisfies the builtin error interface
func (e MemoPropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoPropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoPropertyValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Placeholder

	// no validation rules for Latitude

	// no validation rules for Longitude

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on CreateMemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateMemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMemoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMemoRequestMultiError, or nil if none found.
func (m *CreateMemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Visibility

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMemoRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMemoRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMemoRequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMemoRequestValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMemoRequestValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMemoRequestValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMemoRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMemoRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMemoRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMemoRequestMultiError(errors)
	}

	return nil
}

// CreateMemoRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMemoRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMemoRequestMultiError) AllErrors() []error { return m }

// CreateMemoRequestValidationError is the validation error returned by
// CreateMemoRequest.Validate if the designated constraints aren't met.
type CreateMemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMemoRequestValidationError) ErrorName() string {
	return "CreateMemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMemoRequestValidationError{}

// Validate checks the field values on ListMemosRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMemosRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemosRequestMultiError, or nil if none found.
func (m *ListMemosRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemosRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for Filter

	// no validation rules for View

	if len(errors) > 0 {
		return ListMemosRequestMultiError(errors)
	}

	return nil
}

// ListMemosRequestMultiError is an error wrapping multiple validation errors
// returned by ListMemosRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMemosRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemosRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemosRequestMultiError) AllErrors() []error { return m }

// ListMemosRequestValidationError is the validation error returned by
// ListMemosRequest.Validate if the designated constraints aren't met.
type ListMemosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemosRequestValidationError) ErrorName() string { return "ListMemosRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListMemosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemosRequestValidationError{}

// Validate checks the field values on ListMemosResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMemosResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemosResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemosResponseMultiError, or nil if none found.
func (m *ListMemosResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemosResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMemosResponseValidationError{
						field:  fmt.Sprintf("Memos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMemosResponseValidationError{
						field:  fmt.Sprintf("Memos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMemosResponseValidationError{
					field:  fmt.Sprintf("Memos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListMemosResponseMultiError(errors)
	}

	return nil
}

// ListMemosResponseMultiError is an error wrapping multiple validation errors
// returned by ListMemosResponse.ValidateAll() if the designated constraints
// aren't met.
type ListMemosResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemosResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemosResponseMultiError) AllErrors() []error { return m }

// ListMemosResponseValidationError is the validation error returned by
// ListMemosResponse.Validate if the designated constraints aren't met.
type ListMemosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemosResponseValidationError) ErrorName() string {
	return "ListMemosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemosResponseValidationError{}

// Validate checks the field values on GetMemoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMemoRequestMultiError,
// or nil if none found.
func (m *GetMemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetMemoRequestMultiError(errors)
	}

	return nil
}

// GetMemoRequestMultiError is an error wrapping multiple validation errors
// returned by GetMemoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemoRequestMultiError) AllErrors() []error { return m }

// GetMemoRequestValidationError is the validation error returned by
// GetMemoRequest.Validate if the designated constraints aren't met.
type GetMemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemoRequestValidationError) ErrorName() string { return "GetMemoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemoRequestValidationError{}

// Validate checks the field values on GetMemoByUidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemoByUidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemoByUidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemoByUidRequestMultiError, or nil if none found.
func (m *GetMemoByUidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemoByUidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetMemoByUidRequestMultiError(errors)
	}

	return nil
}

// GetMemoByUidRequestMultiError is an error wrapping multiple validation
// errors returned by GetMemoByUidRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMemoByUidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemoByUidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemoByUidRequestMultiError) AllErrors() []error { return m }

// GetMemoByUidRequestValidationError is the validation error returned by
// GetMemoByUidRequest.Validate if the designated constraints aren't met.
type GetMemoByUidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemoByUidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemoByUidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemoByUidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemoByUidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemoByUidRequestValidationError) ErrorName() string {
	return "GetMemoByUidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemoByUidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemoByUidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemoByUidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemoByUidRequestValidationError{}

// Validate checks the field values on UpdateMemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemoRequestMultiError, or nil if none found.
func (m *UpdateMemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemoRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemoRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemoRequestValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemoRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemoRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemoRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMemoRequestMultiError(errors)
	}

	return nil
}

// UpdateMemoRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateMemoRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateMemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemoRequestMultiError) AllErrors() []error { return m }

// UpdateMemoRequestValidationError is the validation error returned by
// UpdateMemoRequest.Validate if the designated constraints aren't met.
type UpdateMemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemoRequestValidationError) ErrorName() string {
	return "UpdateMemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemoRequestValidationError{}

// Validate checks the field values on DeleteMemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemoRequestMultiError, or nil if none found.
func (m *DeleteMemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteMemoRequestMultiError(errors)
	}

	return nil
}

// DeleteMemoRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMemoRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemoRequestMultiError) AllErrors() []error { return m }

// DeleteMemoRequestValidationError is the validation error returned by
// DeleteMemoRequest.Validate if the designated constraints aren't met.
type DeleteMemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemoRequestValidationError) ErrorName() string {
	return "DeleteMemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemoRequestValidationError{}

// Validate checks the field values on RenameMemoTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameMemoTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameMemoTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameMemoTagRequestMultiError, or nil if none found.
func (m *RenameMemoTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameMemoTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for OldTag

	// no validation rules for NewTag

	if len(errors) > 0 {
		return RenameMemoTagRequestMultiError(errors)
	}

	return nil
}

// RenameMemoTagRequestMultiError is an error wrapping multiple validation
// errors returned by RenameMemoTagRequest.ValidateAll() if the designated
// constraints aren't met.
type RenameMemoTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameMemoTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameMemoTagRequestMultiError) AllErrors() []error { return m }

// RenameMemoTagRequestValidationError is the validation error returned by
// RenameMemoTagRequest.Validate if the designated constraints aren't met.
type RenameMemoTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameMemoTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameMemoTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameMemoTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameMemoTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameMemoTagRequestValidationError) ErrorName() string {
	return "RenameMemoTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameMemoTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameMemoTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameMemoTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameMemoTagRequestValidationError{}

// Validate checks the field values on DeleteMemoTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemoTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemoTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemoTagRequestMultiError, or nil if none found.
func (m *DeleteMemoTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemoTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for Tag

	// no validation rules for DeleteRelatedMemos

	if len(errors) > 0 {
		return DeleteMemoTagRequestMultiError(errors)
	}

	return nil
}

// DeleteMemoTagRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemoTagRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemoTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemoTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemoTagRequestMultiError) AllErrors() []error { return m }

// DeleteMemoTagRequestValidationError is the validation error returned by
// DeleteMemoTagRequest.Validate if the designated constraints aren't met.
type DeleteMemoTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemoTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemoTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemoTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemoTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemoTagRequestValidationError) ErrorName() string {
	return "DeleteMemoTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemoTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemoTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemoTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemoTagRequestValidationError{}

// Validate checks the field values on SetMemoResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMemoResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMemoResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMemoResourcesRequestMultiError, or nil if none found.
func (m *SetMemoResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMemoResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetMemoResourcesRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetMemoResourcesRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetMemoResourcesRequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetMemoResourcesRequestMultiError(errors)
	}

	return nil
}

// SetMemoResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by SetMemoResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type SetMemoResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMemoResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMemoResourcesRequestMultiError) AllErrors() []error { return m }

// SetMemoResourcesRequestValidationError is the validation error returned by
// SetMemoResourcesRequest.Validate if the designated constraints aren't met.
type SetMemoResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMemoResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMemoResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMemoResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMemoResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMemoResourcesRequestValidationError) ErrorName() string {
	return "SetMemoResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMemoResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMemoResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMemoResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMemoResourcesRequestValidationError{}

// Validate checks the field values on ListMemoResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoResourcesRequestMultiError, or nil if none found.
func (m *ListMemoResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ListMemoResourcesRequestMultiError(errors)
	}

	return nil
}

// ListMemoResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by ListMemoResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMemoResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoResourcesRequestMultiError) AllErrors() []error { return m }

// ListMemoResourcesRequestValidationError is the validation error returned by
// ListMemoResourcesRequest.Validate if the designated constraints aren't met.
type ListMemoResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoResourcesRequestValidationError) ErrorName() string {
	return "ListMemoResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoResourcesRequestValidationError{}

// Validate checks the field values on ListMemoResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoResourcesResponseMultiError, or nil if none found.
func (m *ListMemoResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMemoResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMemoResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMemoResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMemoResourcesResponseMultiError(errors)
	}

	return nil
}

// ListMemoResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by ListMemoResourcesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListMemoResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoResourcesResponseMultiError) AllErrors() []error { return m }

// ListMemoResourcesResponseValidationError is the validation error returned by
// ListMemoResourcesResponse.Validate if the designated constraints aren't met.
type ListMemoResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoResourcesResponseValidationError) ErrorName() string {
	return "ListMemoResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoResourcesResponseValidationError{}

// Validate checks the field values on SetMemoRelationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMemoRelationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMemoRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMemoRelationsRequestMultiError, or nil if none found.
func (m *SetMemoRelationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMemoRelationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetMemoRelationsRequestValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetMemoRelationsRequestValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetMemoRelationsRequestValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetMemoRelationsRequestMultiError(errors)
	}

	return nil
}

// SetMemoRelationsRequestMultiError is an error wrapping multiple validation
// errors returned by SetMemoRelationsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetMemoRelationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMemoRelationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMemoRelationsRequestMultiError) AllErrors() []error { return m }

// SetMemoRelationsRequestValidationError is the validation error returned by
// SetMemoRelationsRequest.Validate if the designated constraints aren't met.
type SetMemoRelationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMemoRelationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMemoRelationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMemoRelationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMemoRelationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMemoRelationsRequestValidationError) ErrorName() string {
	return "SetMemoRelationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMemoRelationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMemoRelationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMemoRelationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMemoRelationsRequestValidationError{}

// Validate checks the field values on ListMemoRelationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoRelationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoRelationsRequestMultiError, or nil if none found.
func (m *ListMemoRelationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoRelationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ListMemoRelationsRequestMultiError(errors)
	}

	return nil
}

// ListMemoRelationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListMemoRelationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMemoRelationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoRelationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoRelationsRequestMultiError) AllErrors() []error { return m }

// ListMemoRelationsRequestValidationError is the validation error returned by
// ListMemoRelationsRequest.Validate if the designated constraints aren't met.
type ListMemoRelationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoRelationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoRelationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoRelationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoRelationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoRelationsRequestValidationError) ErrorName() string {
	return "ListMemoRelationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoRelationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoRelationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoRelationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoRelationsRequestValidationError{}

// Validate checks the field values on ListMemoRelationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoRelationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoRelationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoRelationsResponseMultiError, or nil if none found.
func (m *ListMemoRelationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoRelationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMemoRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMemoRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMemoRelationsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMemoRelationsResponseMultiError(errors)
	}

	return nil
}

// ListMemoRelationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListMemoRelationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListMemoRelationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoRelationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoRelationsResponseMultiError) AllErrors() []error { return m }

// ListMemoRelationsResponseValidationError is the validation error returned by
// ListMemoRelationsResponse.Validate if the designated constraints aren't met.
type ListMemoRelationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoRelationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoRelationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoRelationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoRelationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoRelationsResponseValidationError) ErrorName() string {
	return "ListMemoRelationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoRelationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoRelationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoRelationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoRelationsResponseValidationError{}

// Validate checks the field values on CreateMemoCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMemoCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMemoCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMemoCommentRequestMultiError, or nil if none found.
func (m *CreateMemoCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMemoCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMemoCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMemoCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMemoCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMemoCommentRequestMultiError(errors)
	}

	return nil
}

// CreateMemoCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMemoCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMemoCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMemoCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMemoCommentRequestMultiError) AllErrors() []error { return m }

// CreateMemoCommentRequestValidationError is the validation error returned by
// CreateMemoCommentRequest.Validate if the designated constraints aren't met.
type CreateMemoCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMemoCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMemoCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMemoCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMemoCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMemoCommentRequestValidationError) ErrorName() string {
	return "CreateMemoCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMemoCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMemoCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMemoCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMemoCommentRequestValidationError{}

// Validate checks the field values on ListMemoCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoCommentsRequestMultiError, or nil if none found.
func (m *ListMemoCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ListMemoCommentsRequestMultiError(errors)
	}

	return nil
}

// ListMemoCommentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListMemoCommentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMemoCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoCommentsRequestMultiError) AllErrors() []error { return m }

// ListMemoCommentsRequestValidationError is the validation error returned by
// ListMemoCommentsRequest.Validate if the designated constraints aren't met.
type ListMemoCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoCommentsRequestValidationError) ErrorName() string {
	return "ListMemoCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoCommentsRequestValidationError{}

// Validate checks the field values on ListMemoCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoCommentsResponseMultiError, or nil if none found.
func (m *ListMemoCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMemoCommentsResponseValidationError{
						field:  fmt.Sprintf("Memos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMemoCommentsResponseValidationError{
						field:  fmt.Sprintf("Memos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMemoCommentsResponseValidationError{
					field:  fmt.Sprintf("Memos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMemoCommentsResponseMultiError(errors)
	}

	return nil
}

// ListMemoCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListMemoCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMemoCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoCommentsResponseMultiError) AllErrors() []error { return m }

// ListMemoCommentsResponseValidationError is the validation error returned by
// ListMemoCommentsResponse.Validate if the designated constraints aren't met.
type ListMemoCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoCommentsResponseValidationError) ErrorName() string {
	return "ListMemoCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoCommentsResponseValidationError{}

// Validate checks the field values on ListMemoReactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoReactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoReactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoReactionsRequestMultiError, or nil if none found.
func (m *ListMemoReactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoReactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ListMemoReactionsRequestMultiError(errors)
	}

	return nil
}

// ListMemoReactionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListMemoReactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMemoReactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoReactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoReactionsRequestMultiError) AllErrors() []error { return m }

// ListMemoReactionsRequestValidationError is the validation error returned by
// ListMemoReactionsRequest.Validate if the designated constraints aren't met.
type ListMemoReactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoReactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoReactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoReactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoReactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoReactionsRequestValidationError) ErrorName() string {
	return "ListMemoReactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoReactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoReactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoReactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoReactionsRequestValidationError{}

// Validate checks the field values on ListMemoReactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoReactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoReactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoReactionsResponseMultiError, or nil if none found.
func (m *ListMemoReactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoReactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMemoReactionsResponseValidationError{
						field:  fmt.Sprintf("Reactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMemoReactionsResponseValidationError{
						field:  fmt.Sprintf("Reactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMemoReactionsResponseValidationError{
					field:  fmt.Sprintf("Reactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMemoReactionsResponseMultiError(errors)
	}

	return nil
}

// ListMemoReactionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListMemoReactionsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListMemoReactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoReactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoReactionsResponseMultiError) AllErrors() []error { return m }

// ListMemoReactionsResponseValidationError is the validation error returned by
// ListMemoReactionsResponse.Validate if the designated constraints aren't met.
type ListMemoReactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoReactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoReactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoReactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoReactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoReactionsResponseValidationError) ErrorName() string {
	return "ListMemoReactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoReactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoReactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoReactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoReactionsResponseValidationError{}

// Validate checks the field values on UpsertMemoReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertMemoReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertMemoReactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertMemoReactionRequestMultiError, or nil if none found.
func (m *UpsertMemoReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertMemoReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetReaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertMemoReactionRequestValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertMemoReactionRequestValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertMemoReactionRequestValidationError{
				field:  "Reaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertMemoReactionRequestMultiError(errors)
	}

	return nil
}

// UpsertMemoReactionRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertMemoReactionRequest.ValidateAll() if the
// designated constraints aren't met.
type UpsertMemoReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertMemoReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertMemoReactionRequestMultiError) AllErrors() []error { return m }

// UpsertMemoReactionRequestValidationError is the validation error returned by
// UpsertMemoReactionRequest.Validate if the designated constraints aren't met.
type UpsertMemoReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMemoReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMemoReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMemoReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMemoReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMemoReactionRequestValidationError) ErrorName() string {
	return "UpsertMemoReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMemoReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMemoReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMemoReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMemoReactionRequestValidationError{}

// Validate checks the field values on DeleteMemoReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemoReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemoReactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemoReactionRequestMultiError, or nil if none found.
func (m *DeleteMemoReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemoReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReactionId

	if len(errors) > 0 {
		return DeleteMemoReactionRequestMultiError(errors)
	}

	return nil
}

// DeleteMemoReactionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemoReactionRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteMemoReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemoReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemoReactionRequestMultiError) AllErrors() []error { return m }

// DeleteMemoReactionRequestValidationError is the validation error returned by
// DeleteMemoReactionRequest.Validate if the designated constraints aren't met.
type DeleteMemoReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemoReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemoReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemoReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemoReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemoReactionRequestValidationError) ErrorName() string {
	return "DeleteMemoReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemoReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemoReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemoReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemoReactionRequestValidationError{}
