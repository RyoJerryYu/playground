//Code generated by protoc-gen-go-fieldmask. DO NOT EDIT.
//versions:
//- protoc-gen-go-fieldmask v1.0.9
//- protoc (unknown)
//source: api/v1/users/user_service.proto

package users

import (
	fieldmask "github.com/RyoJerryYu/protoc-gen-plugins/pkg/fieldmask"
)

// IUserFieldPath is the interface for the field path of User
type IUserFieldPath interface {
	String() string
	Name() string
	Id() string
	Role() string
	Username() string
	Email() string
	Nickname() string
	AvatarUrl() string
	Description() string
	Password() string
	RowStatus() string
	CreateTime() fieldmask.ITimestampFieldPath
	UpdateTime() fieldmask.ITimestampFieldPath
}

// userFieldPath is the implementation for the field path of User
type userFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewUserFieldPath creates a new userFieldPath
func NewUserFieldPath(fieldPath string) IUserFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return userFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x userFieldPath) String() string { return x.fieldPath }

func (x userFieldPath) Name() string        { return x.prefix + "name" }
func (x userFieldPath) Id() string          { return x.prefix + "id" }
func (x userFieldPath) Role() string        { return x.prefix + "role" }
func (x userFieldPath) Username() string    { return x.prefix + "username" }
func (x userFieldPath) Email() string       { return x.prefix + "email" }
func (x userFieldPath) Nickname() string    { return x.prefix + "nickname" }
func (x userFieldPath) AvatarUrl() string   { return x.prefix + "avatar_url" }
func (x userFieldPath) Description() string { return x.prefix + "description" }
func (x userFieldPath) Password() string    { return x.prefix + "password" }
func (x userFieldPath) RowStatus() string   { return x.prefix + "row_status" }
func (x userFieldPath) CreateTime() fieldmask.ITimestampFieldPath {
	return fieldmask.NewTimestampFieldPath(x.prefix + "create_time")
}
func (x userFieldPath) UpdateTime() fieldmask.ITimestampFieldPath {
	return fieldmask.NewTimestampFieldPath(x.prefix + "update_time")
}

// FieldPath returns the field path for User
func (x *User) FieldPath() IUserFieldPath {
	return NewUserFieldPath("")
}

// IListUsersRequestFieldPath is the interface for the field path of ListUsersRequest
type IListUsersRequestFieldPath interface {
	String() string
}

// listUsersRequestFieldPath is the implementation for the field path of ListUsersRequest
type listUsersRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewListUsersRequestFieldPath creates a new listUsersRequestFieldPath
func NewListUsersRequestFieldPath(fieldPath string) IListUsersRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return listUsersRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x listUsersRequestFieldPath) String() string { return x.fieldPath }

// FieldPath returns the field path for ListUsersRequest
func (x *ListUsersRequest) FieldPath() IListUsersRequestFieldPath {
	return NewListUsersRequestFieldPath("")
}

// IListUsersResponseFieldPath is the interface for the field path of ListUsersResponse
type IListUsersResponseFieldPath interface {
	String() string
	Users() string
}

// listUsersResponseFieldPath is the implementation for the field path of ListUsersResponse
type listUsersResponseFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewListUsersResponseFieldPath creates a new listUsersResponseFieldPath
func NewListUsersResponseFieldPath(fieldPath string) IListUsersResponseFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return listUsersResponseFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x listUsersResponseFieldPath) String() string { return x.fieldPath }

func (x listUsersResponseFieldPath) Users() string { return x.prefix + "users" }

// FieldPath returns the field path for ListUsersResponse
func (x *ListUsersResponse) FieldPath() IListUsersResponseFieldPath {
	return NewListUsersResponseFieldPath("")
}

// ISearchUsersRequestFieldPath is the interface for the field path of SearchUsersRequest
type ISearchUsersRequestFieldPath interface {
	String() string
	Filter() string
}

// searchUsersRequestFieldPath is the implementation for the field path of SearchUsersRequest
type searchUsersRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewSearchUsersRequestFieldPath creates a new searchUsersRequestFieldPath
func NewSearchUsersRequestFieldPath(fieldPath string) ISearchUsersRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return searchUsersRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x searchUsersRequestFieldPath) String() string { return x.fieldPath }

func (x searchUsersRequestFieldPath) Filter() string { return x.prefix + "filter" }

// FieldPath returns the field path for SearchUsersRequest
func (x *SearchUsersRequest) FieldPath() ISearchUsersRequestFieldPath {
	return NewSearchUsersRequestFieldPath("")
}

// ISearchUsersResponseFieldPath is the interface for the field path of SearchUsersResponse
type ISearchUsersResponseFieldPath interface {
	String() string
	Users() string
}

// searchUsersResponseFieldPath is the implementation for the field path of SearchUsersResponse
type searchUsersResponseFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewSearchUsersResponseFieldPath creates a new searchUsersResponseFieldPath
func NewSearchUsersResponseFieldPath(fieldPath string) ISearchUsersResponseFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return searchUsersResponseFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x searchUsersResponseFieldPath) String() string { return x.fieldPath }

func (x searchUsersResponseFieldPath) Users() string { return x.prefix + "users" }

// FieldPath returns the field path for SearchUsersResponse
func (x *SearchUsersResponse) FieldPath() ISearchUsersResponseFieldPath {
	return NewSearchUsersResponseFieldPath("")
}

// IGetUserRequestFieldPath is the interface for the field path of GetUserRequest
type IGetUserRequestFieldPath interface {
	String() string
	Name() string
}

// getUserRequestFieldPath is the implementation for the field path of GetUserRequest
type getUserRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewGetUserRequestFieldPath creates a new getUserRequestFieldPath
func NewGetUserRequestFieldPath(fieldPath string) IGetUserRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return getUserRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x getUserRequestFieldPath) String() string { return x.fieldPath }

func (x getUserRequestFieldPath) Name() string { return x.prefix + "name" }

// FieldPath returns the field path for GetUserRequest
func (x *GetUserRequest) FieldPath() IGetUserRequestFieldPath {
	return NewGetUserRequestFieldPath("")
}

// IGetUserAvatarBinaryRequestFieldPath is the interface for the field path of GetUserAvatarBinaryRequest
type IGetUserAvatarBinaryRequestFieldPath interface {
	String() string
	Name() string
	HttpBody() string
}

// getUserAvatarBinaryRequestFieldPath is the implementation for the field path of GetUserAvatarBinaryRequest
type getUserAvatarBinaryRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewGetUserAvatarBinaryRequestFieldPath creates a new getUserAvatarBinaryRequestFieldPath
func NewGetUserAvatarBinaryRequestFieldPath(fieldPath string) IGetUserAvatarBinaryRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return getUserAvatarBinaryRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x getUserAvatarBinaryRequestFieldPath) String() string { return x.fieldPath }

func (x getUserAvatarBinaryRequestFieldPath) Name() string     { return x.prefix + "name" }
func (x getUserAvatarBinaryRequestFieldPath) HttpBody() string { return x.prefix + "http_body" }

// FieldPath returns the field path for GetUserAvatarBinaryRequest
func (x *GetUserAvatarBinaryRequest) FieldPath() IGetUserAvatarBinaryRequestFieldPath {
	return NewGetUserAvatarBinaryRequestFieldPath("")
}

// ICreateUserRequestFieldPath is the interface for the field path of CreateUserRequest
type ICreateUserRequestFieldPath interface {
	String() string
	User() IUserFieldPath
}

// createUserRequestFieldPath is the implementation for the field path of CreateUserRequest
type createUserRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewCreateUserRequestFieldPath creates a new createUserRequestFieldPath
func NewCreateUserRequestFieldPath(fieldPath string) ICreateUserRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return createUserRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x createUserRequestFieldPath) String() string { return x.fieldPath }

func (x createUserRequestFieldPath) User() IUserFieldPath { return NewUserFieldPath(x.prefix + "user") }

// FieldPath returns the field path for CreateUserRequest
func (x *CreateUserRequest) FieldPath() ICreateUserRequestFieldPath {
	return NewCreateUserRequestFieldPath("")
}

// IUpdateUserRequestFieldPath is the interface for the field path of UpdateUserRequest
type IUpdateUserRequestFieldPath interface {
	String() string
	User() IUserFieldPath
	UpdateMask() fieldmask.IFieldMaskFieldPath
}

// updateUserRequestFieldPath is the implementation for the field path of UpdateUserRequest
type updateUserRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewUpdateUserRequestFieldPath creates a new updateUserRequestFieldPath
func NewUpdateUserRequestFieldPath(fieldPath string) IUpdateUserRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return updateUserRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x updateUserRequestFieldPath) String() string { return x.fieldPath }

func (x updateUserRequestFieldPath) User() IUserFieldPath { return NewUserFieldPath(x.prefix + "user") }
func (x updateUserRequestFieldPath) UpdateMask() fieldmask.IFieldMaskFieldPath {
	return fieldmask.NewFieldMaskFieldPath(x.prefix + "update_mask")
}

// FieldPath returns the field path for UpdateUserRequest
func (x *UpdateUserRequest) FieldPath() IUpdateUserRequestFieldPath {
	return NewUpdateUserRequestFieldPath("")
}

// IDeleteUserRequestFieldPath is the interface for the field path of DeleteUserRequest
type IDeleteUserRequestFieldPath interface {
	String() string
	Name() string
}

// deleteUserRequestFieldPath is the implementation for the field path of DeleteUserRequest
type deleteUserRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewDeleteUserRequestFieldPath creates a new deleteUserRequestFieldPath
func NewDeleteUserRequestFieldPath(fieldPath string) IDeleteUserRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return deleteUserRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x deleteUserRequestFieldPath) String() string { return x.fieldPath }

func (x deleteUserRequestFieldPath) Name() string { return x.prefix + "name" }

// FieldPath returns the field path for DeleteUserRequest
func (x *DeleteUserRequest) FieldPath() IDeleteUserRequestFieldPath {
	return NewDeleteUserRequestFieldPath("")
}

// IUserSettingFieldPath is the interface for the field path of UserSetting
type IUserSettingFieldPath interface {
	String() string
	Name() string
	Locale() string
	Appearance() string
	MemoVisibility() string
}

// userSettingFieldPath is the implementation for the field path of UserSetting
type userSettingFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewUserSettingFieldPath creates a new userSettingFieldPath
func NewUserSettingFieldPath(fieldPath string) IUserSettingFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return userSettingFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x userSettingFieldPath) String() string { return x.fieldPath }

func (x userSettingFieldPath) Name() string           { return x.prefix + "name" }
func (x userSettingFieldPath) Locale() string         { return x.prefix + "locale" }
func (x userSettingFieldPath) Appearance() string     { return x.prefix + "appearance" }
func (x userSettingFieldPath) MemoVisibility() string { return x.prefix + "memo_visibility" }

// FieldPath returns the field path for UserSetting
func (x *UserSetting) FieldPath() IUserSettingFieldPath {
	return NewUserSettingFieldPath("")
}

// IGetUserSettingRequestFieldPath is the interface for the field path of GetUserSettingRequest
type IGetUserSettingRequestFieldPath interface {
	String() string
	Name() string
}

// getUserSettingRequestFieldPath is the implementation for the field path of GetUserSettingRequest
type getUserSettingRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewGetUserSettingRequestFieldPath creates a new getUserSettingRequestFieldPath
func NewGetUserSettingRequestFieldPath(fieldPath string) IGetUserSettingRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return getUserSettingRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x getUserSettingRequestFieldPath) String() string { return x.fieldPath }

func (x getUserSettingRequestFieldPath) Name() string { return x.prefix + "name" }

// FieldPath returns the field path for GetUserSettingRequest
func (x *GetUserSettingRequest) FieldPath() IGetUserSettingRequestFieldPath {
	return NewGetUserSettingRequestFieldPath("")
}

// IUpdateUserSettingRequestFieldPath is the interface for the field path of UpdateUserSettingRequest
type IUpdateUserSettingRequestFieldPath interface {
	String() string
	Setting() IUserSettingFieldPath
	UpdateMask() fieldmask.IFieldMaskFieldPath
}

// updateUserSettingRequestFieldPath is the implementation for the field path of UpdateUserSettingRequest
type updateUserSettingRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewUpdateUserSettingRequestFieldPath creates a new updateUserSettingRequestFieldPath
func NewUpdateUserSettingRequestFieldPath(fieldPath string) IUpdateUserSettingRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return updateUserSettingRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x updateUserSettingRequestFieldPath) String() string { return x.fieldPath }

func (x updateUserSettingRequestFieldPath) Setting() IUserSettingFieldPath {
	return NewUserSettingFieldPath(x.prefix + "setting")
}
func (x updateUserSettingRequestFieldPath) UpdateMask() fieldmask.IFieldMaskFieldPath {
	return fieldmask.NewFieldMaskFieldPath(x.prefix + "update_mask")
}

// FieldPath returns the field path for UpdateUserSettingRequest
func (x *UpdateUserSettingRequest) FieldPath() IUpdateUserSettingRequestFieldPath {
	return NewUpdateUserSettingRequestFieldPath("")
}

// IUserAccessTokenFieldPath is the interface for the field path of UserAccessToken
type IUserAccessTokenFieldPath interface {
	String() string
	AccessToken() string
	Description() string
	IssuedAt() fieldmask.ITimestampFieldPath
	ExpiresAt() fieldmask.ITimestampFieldPath
}

// userAccessTokenFieldPath is the implementation for the field path of UserAccessToken
type userAccessTokenFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewUserAccessTokenFieldPath creates a new userAccessTokenFieldPath
func NewUserAccessTokenFieldPath(fieldPath string) IUserAccessTokenFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return userAccessTokenFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x userAccessTokenFieldPath) String() string { return x.fieldPath }

func (x userAccessTokenFieldPath) AccessToken() string { return x.prefix + "access_token" }
func (x userAccessTokenFieldPath) Description() string { return x.prefix + "description" }
func (x userAccessTokenFieldPath) IssuedAt() fieldmask.ITimestampFieldPath {
	return fieldmask.NewTimestampFieldPath(x.prefix + "issued_at")
}
func (x userAccessTokenFieldPath) ExpiresAt() fieldmask.ITimestampFieldPath {
	return fieldmask.NewTimestampFieldPath(x.prefix + "expires_at")
}

// FieldPath returns the field path for UserAccessToken
func (x *UserAccessToken) FieldPath() IUserAccessTokenFieldPath {
	return NewUserAccessTokenFieldPath("")
}

// IListUserAccessTokensRequestFieldPath is the interface for the field path of ListUserAccessTokensRequest
type IListUserAccessTokensRequestFieldPath interface {
	String() string
	Name() string
}

// listUserAccessTokensRequestFieldPath is the implementation for the field path of ListUserAccessTokensRequest
type listUserAccessTokensRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewListUserAccessTokensRequestFieldPath creates a new listUserAccessTokensRequestFieldPath
func NewListUserAccessTokensRequestFieldPath(fieldPath string) IListUserAccessTokensRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return listUserAccessTokensRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x listUserAccessTokensRequestFieldPath) String() string { return x.fieldPath }

func (x listUserAccessTokensRequestFieldPath) Name() string { return x.prefix + "name" }

// FieldPath returns the field path for ListUserAccessTokensRequest
func (x *ListUserAccessTokensRequest) FieldPath() IListUserAccessTokensRequestFieldPath {
	return NewListUserAccessTokensRequestFieldPath("")
}

// IListUserAccessTokensResponseFieldPath is the interface for the field path of ListUserAccessTokensResponse
type IListUserAccessTokensResponseFieldPath interface {
	String() string
	AccessTokens() string
}

// listUserAccessTokensResponseFieldPath is the implementation for the field path of ListUserAccessTokensResponse
type listUserAccessTokensResponseFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewListUserAccessTokensResponseFieldPath creates a new listUserAccessTokensResponseFieldPath
func NewListUserAccessTokensResponseFieldPath(fieldPath string) IListUserAccessTokensResponseFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return listUserAccessTokensResponseFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x listUserAccessTokensResponseFieldPath) String() string { return x.fieldPath }

func (x listUserAccessTokensResponseFieldPath) AccessTokens() string {
	return x.prefix + "access_tokens"
}

// FieldPath returns the field path for ListUserAccessTokensResponse
func (x *ListUserAccessTokensResponse) FieldPath() IListUserAccessTokensResponseFieldPath {
	return NewListUserAccessTokensResponseFieldPath("")
}

// ICreateUserAccessTokenRequestFieldPath is the interface for the field path of CreateUserAccessTokenRequest
type ICreateUserAccessTokenRequestFieldPath interface {
	String() string
	Name() string
	Description() string
}

// createUserAccessTokenRequestFieldPath is the implementation for the field path of CreateUserAccessTokenRequest
type createUserAccessTokenRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewCreateUserAccessTokenRequestFieldPath creates a new createUserAccessTokenRequestFieldPath
func NewCreateUserAccessTokenRequestFieldPath(fieldPath string) ICreateUserAccessTokenRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return createUserAccessTokenRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x createUserAccessTokenRequestFieldPath) String() string { return x.fieldPath }

func (x createUserAccessTokenRequestFieldPath) Name() string        { return x.prefix + "name" }
func (x createUserAccessTokenRequestFieldPath) Description() string { return x.prefix + "description" }

// FieldPath returns the field path for CreateUserAccessTokenRequest
func (x *CreateUserAccessTokenRequest) FieldPath() ICreateUserAccessTokenRequestFieldPath {
	return NewCreateUserAccessTokenRequestFieldPath("")
}

// IDeleteUserAccessTokenRequestFieldPath is the interface for the field path of DeleteUserAccessTokenRequest
type IDeleteUserAccessTokenRequestFieldPath interface {
	String() string
	Name() string
	AccessToken() string
}

// deleteUserAccessTokenRequestFieldPath is the implementation for the field path of DeleteUserAccessTokenRequest
type deleteUserAccessTokenRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewDeleteUserAccessTokenRequestFieldPath creates a new deleteUserAccessTokenRequestFieldPath
func NewDeleteUserAccessTokenRequestFieldPath(fieldPath string) IDeleteUserAccessTokenRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return deleteUserAccessTokenRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x deleteUserAccessTokenRequestFieldPath) String() string { return x.fieldPath }

func (x deleteUserAccessTokenRequestFieldPath) Name() string        { return x.prefix + "name" }
func (x deleteUserAccessTokenRequestFieldPath) AccessToken() string { return x.prefix + "access_token" }

// FieldPath returns the field path for DeleteUserAccessTokenRequest
func (x *DeleteUserAccessTokenRequest) FieldPath() IDeleteUserAccessTokenRequestFieldPath {
	return NewDeleteUserAccessTokenRequestFieldPath("")
}
