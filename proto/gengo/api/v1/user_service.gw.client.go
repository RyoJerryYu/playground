// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: api/v1/user_service.proto

package apiv1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	url "net/url"
)

// UserServiceGatewayClient is the interface for UserService service client.
type UserServiceGatewayClient interface {
	// ListUsers returns a list of users.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// SearchUsers searches users by filter.
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	// GetUser gets a user by name.
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// GetUserAvatarBinary gets the avatar of a user.
	GetUserAvatarBinary(context.Context, *GetUserAvatarBinaryRequest) (*httpbody.HttpBody, error)
	// CreateUser creates a new user.
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	// DeleteUser deletes a user.
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// GetUserSetting gets the setting of a user.
	GetUserSetting(context.Context, *GetUserSettingRequest) (*UserSetting, error)
	// UpdateUserSetting updates the setting of a user.
	UpdateUserSetting(context.Context, *UpdateUserSettingRequest) (*UserSetting, error)
	// ListUserAccessTokens returns a list of access tokens for a user.
	ListUserAccessTokens(context.Context, *ListUserAccessTokensRequest) (*ListUserAccessTokensResponse, error)
	// CreateUserAccessToken creates a new access token for a user.
	CreateUserAccessToken(context.Context, *CreateUserAccessTokenRequest) (*UserAccessToken, error)
	// DeleteUserAccessToken deletes an access token for a user.
	DeleteUserAccessToken(context.Context, *DeleteUserAccessTokenRequest) (*emptypb.Empty, error)
}

func NewUserServiceGatewayClient(c gateway.Client) UserServiceGatewayClient {
	return &userServiceGatewayClient{
		gwc: c,
	}
}

type userServiceGatewayClient struct {
	gwc gateway.Client
}

func (c *userServiceGatewayClient) ListUsers(ctx context.Context, req *ListUsersRequest) (*ListUsersResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/users")
	return gateway.DoRequest[ListUsersResponse](ctx, gwReq)
}

func (c *userServiceGatewayClient) SearchUsers(ctx context.Context, req *SearchUsersRequest) (*SearchUsersResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/users:search")
	q := url.Values{}
	q.Add("filter", fmt.Sprintf("%v", req.Filter))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[SearchUsersResponse](ctx, gwReq)
}

func (c *userServiceGatewayClient) GetUser(ctx context.Context, req *GetUserRequest) (*User, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=users/*}")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[User](ctx, gwReq)
}

func (c *userServiceGatewayClient) GetUserAvatarBinary(ctx context.Context, req *GetUserAvatarBinaryRequest) (*httpbody.HttpBody, error) {
	gwReq := c.gwc.NewRequest("GET", "/file/{name=users/*}/avatar")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	q.Add("httpBody.contentType", fmt.Sprintf("%v", req.HttpBody.ContentType))
	q.Add("httpBody.data", fmt.Sprintf("%v", req.HttpBody.Data))
	for _, v := range req.HttpBody.Extensions {
		q.Add("httpBody.extensions.typeUrl", fmt.Sprintf("%v", v.TypeUrl))
		q.Add("httpBody.extensions.value", fmt.Sprintf("%v", v.Value))
	}
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[httpbody.HttpBody](ctx, gwReq)
}

func (c *userServiceGatewayClient) CreateUser(ctx context.Context, req *CreateUserRequest) (*User, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/users")
	gwReq.SetBody(req.User)
	return gateway.DoRequest[User](ctx, gwReq)
}

func (c *userServiceGatewayClient) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*User, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/{user.name=users/*}")
	gwReq.SetBody(req.User)
	return gateway.DoRequest[User](ctx, gwReq)
}

func (c *userServiceGatewayClient) DeleteUser(ctx context.Context, req *DeleteUserRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/{name=users/*}")
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}

func (c *userServiceGatewayClient) GetUserSetting(ctx context.Context, req *GetUserSettingRequest) (*UserSetting, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=users/*}/setting")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[UserSetting](ctx, gwReq)
}

func (c *userServiceGatewayClient) UpdateUserSetting(ctx context.Context, req *UpdateUserSettingRequest) (*UserSetting, error) {
	gwReq := c.gwc.NewRequest("PATCH", "/api/v1/{setting.name=users/*/setting}")
	gwReq.SetBody(req.Setting)
	return gateway.DoRequest[UserSetting](ctx, gwReq)
}

func (c *userServiceGatewayClient) ListUserAccessTokens(ctx context.Context, req *ListUserAccessTokensRequest) (*ListUserAccessTokensResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/api/v1/{name=users/*}/access_tokens")
	q := url.Values{}
	q.Add("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetQueryParamsFromValues(q)
	return gateway.DoRequest[ListUserAccessTokensResponse](ctx, gwReq)
}

func (c *userServiceGatewayClient) CreateUserAccessToken(ctx context.Context, req *CreateUserAccessTokenRequest) (*UserAccessToken, error) {
	gwReq := c.gwc.NewRequest("POST", "/api/v1/{name=users/*}/access_tokens")
	gwReq.SetBody(req)
	return gateway.DoRequest[UserAccessToken](ctx, gwReq)
}

func (c *userServiceGatewayClient) DeleteUserAccessToken(ctx context.Context, req *DeleteUserAccessTokenRequest) (*emptypb.Empty, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/api/v1/{name=users/*}/access_tokens/{access_token}")
	gwReq.SetPathParam("access_token", fmt.Sprintf("%v", req.AccessToken))
	gwReq.SetBody(req)
	return gateway.DoRequest[emptypb.Empty](ctx, gwReq)
}
