//Code generated by protoc-gen-go-fieldmask. DO NOT EDIT.
//versions:
//- protoc-gen-go-fieldmask v1.0.9
//- protoc (unknown)
//source: api/v1/markdown/markdown_service.proto

package markdown

// IParseMarkdownRequestFieldPath is the interface for the field path of ParseMarkdownRequest
type IParseMarkdownRequestFieldPath interface {
	String() string
	Markdown() string
}

// parseMarkdownRequestFieldPath is the implementation for the field path of ParseMarkdownRequest
type parseMarkdownRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewParseMarkdownRequestFieldPath creates a new parseMarkdownRequestFieldPath
func NewParseMarkdownRequestFieldPath(fieldPath string) IParseMarkdownRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return parseMarkdownRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x parseMarkdownRequestFieldPath) String() string { return x.fieldPath }

func (x parseMarkdownRequestFieldPath) Markdown() string { return x.prefix + "markdown" }

// FieldPath returns the field path for ParseMarkdownRequest
func (x *ParseMarkdownRequest) FieldPath() IParseMarkdownRequestFieldPath {
	return NewParseMarkdownRequestFieldPath("")
}

// IParseMarkdownResponseFieldPath is the interface for the field path of ParseMarkdownResponse
type IParseMarkdownResponseFieldPath interface {
	String() string
	Nodes() string
}

// parseMarkdownResponseFieldPath is the implementation for the field path of ParseMarkdownResponse
type parseMarkdownResponseFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewParseMarkdownResponseFieldPath creates a new parseMarkdownResponseFieldPath
func NewParseMarkdownResponseFieldPath(fieldPath string) IParseMarkdownResponseFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return parseMarkdownResponseFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x parseMarkdownResponseFieldPath) String() string { return x.fieldPath }

func (x parseMarkdownResponseFieldPath) Nodes() string { return x.prefix + "nodes" }

// FieldPath returns the field path for ParseMarkdownResponse
func (x *ParseMarkdownResponse) FieldPath() IParseMarkdownResponseFieldPath {
	return NewParseMarkdownResponseFieldPath("")
}

// IRestoreMarkdownNodesRequestFieldPath is the interface for the field path of RestoreMarkdownNodesRequest
type IRestoreMarkdownNodesRequestFieldPath interface {
	String() string
	Nodes() string
}

// restoreMarkdownNodesRequestFieldPath is the implementation for the field path of RestoreMarkdownNodesRequest
type restoreMarkdownNodesRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewRestoreMarkdownNodesRequestFieldPath creates a new restoreMarkdownNodesRequestFieldPath
func NewRestoreMarkdownNodesRequestFieldPath(fieldPath string) IRestoreMarkdownNodesRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return restoreMarkdownNodesRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x restoreMarkdownNodesRequestFieldPath) String() string { return x.fieldPath }

func (x restoreMarkdownNodesRequestFieldPath) Nodes() string { return x.prefix + "nodes" }

// FieldPath returns the field path for RestoreMarkdownNodesRequest
func (x *RestoreMarkdownNodesRequest) FieldPath() IRestoreMarkdownNodesRequestFieldPath {
	return NewRestoreMarkdownNodesRequestFieldPath("")
}

// IRestoreMarkdownNodesResponseFieldPath is the interface for the field path of RestoreMarkdownNodesResponse
type IRestoreMarkdownNodesResponseFieldPath interface {
	String() string
	Markdown() string
}

// restoreMarkdownNodesResponseFieldPath is the implementation for the field path of RestoreMarkdownNodesResponse
type restoreMarkdownNodesResponseFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewRestoreMarkdownNodesResponseFieldPath creates a new restoreMarkdownNodesResponseFieldPath
func NewRestoreMarkdownNodesResponseFieldPath(fieldPath string) IRestoreMarkdownNodesResponseFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return restoreMarkdownNodesResponseFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x restoreMarkdownNodesResponseFieldPath) String() string { return x.fieldPath }

func (x restoreMarkdownNodesResponseFieldPath) Markdown() string { return x.prefix + "markdown" }

// FieldPath returns the field path for RestoreMarkdownNodesResponse
func (x *RestoreMarkdownNodesResponse) FieldPath() IRestoreMarkdownNodesResponseFieldPath {
	return NewRestoreMarkdownNodesResponseFieldPath("")
}

// IStringifyMarkdownNodesRequestFieldPath is the interface for the field path of StringifyMarkdownNodesRequest
type IStringifyMarkdownNodesRequestFieldPath interface {
	String() string
	Nodes() string
}

// stringifyMarkdownNodesRequestFieldPath is the implementation for the field path of StringifyMarkdownNodesRequest
type stringifyMarkdownNodesRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewStringifyMarkdownNodesRequestFieldPath creates a new stringifyMarkdownNodesRequestFieldPath
func NewStringifyMarkdownNodesRequestFieldPath(fieldPath string) IStringifyMarkdownNodesRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return stringifyMarkdownNodesRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x stringifyMarkdownNodesRequestFieldPath) String() string { return x.fieldPath }

func (x stringifyMarkdownNodesRequestFieldPath) Nodes() string { return x.prefix + "nodes" }

// FieldPath returns the field path for StringifyMarkdownNodesRequest
func (x *StringifyMarkdownNodesRequest) FieldPath() IStringifyMarkdownNodesRequestFieldPath {
	return NewStringifyMarkdownNodesRequestFieldPath("")
}

// IStringifyMarkdownNodesResponseFieldPath is the interface for the field path of StringifyMarkdownNodesResponse
type IStringifyMarkdownNodesResponseFieldPath interface {
	String() string
	PlainText() string
}

// stringifyMarkdownNodesResponseFieldPath is the implementation for the field path of StringifyMarkdownNodesResponse
type stringifyMarkdownNodesResponseFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewStringifyMarkdownNodesResponseFieldPath creates a new stringifyMarkdownNodesResponseFieldPath
func NewStringifyMarkdownNodesResponseFieldPath(fieldPath string) IStringifyMarkdownNodesResponseFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return stringifyMarkdownNodesResponseFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x stringifyMarkdownNodesResponseFieldPath) String() string { return x.fieldPath }

func (x stringifyMarkdownNodesResponseFieldPath) PlainText() string { return x.prefix + "plain_text" }

// FieldPath returns the field path for StringifyMarkdownNodesResponse
func (x *StringifyMarkdownNodesResponse) FieldPath() IStringifyMarkdownNodesResponseFieldPath {
	return NewStringifyMarkdownNodesResponseFieldPath("")
}

// IGetLinkMetadataRequestFieldPath is the interface for the field path of GetLinkMetadataRequest
type IGetLinkMetadataRequestFieldPath interface {
	String() string
	Link() string
}

// getLinkMetadataRequestFieldPath is the implementation for the field path of GetLinkMetadataRequest
type getLinkMetadataRequestFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewGetLinkMetadataRequestFieldPath creates a new getLinkMetadataRequestFieldPath
func NewGetLinkMetadataRequestFieldPath(fieldPath string) IGetLinkMetadataRequestFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return getLinkMetadataRequestFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x getLinkMetadataRequestFieldPath) String() string { return x.fieldPath }

func (x getLinkMetadataRequestFieldPath) Link() string { return x.prefix + "link" }

// FieldPath returns the field path for GetLinkMetadataRequest
func (x *GetLinkMetadataRequest) FieldPath() IGetLinkMetadataRequestFieldPath {
	return NewGetLinkMetadataRequestFieldPath("")
}

// ILinkMetadataFieldPath is the interface for the field path of LinkMetadata
type ILinkMetadataFieldPath interface {
	String() string
	Title() string
	Description() string
	Image() string
}

// linkMetadataFieldPath is the implementation for the field path of LinkMetadata
type linkMetadataFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewLinkMetadataFieldPath creates a new linkMetadataFieldPath
func NewLinkMetadataFieldPath(fieldPath string) ILinkMetadataFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return linkMetadataFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x linkMetadataFieldPath) String() string { return x.fieldPath }

func (x linkMetadataFieldPath) Title() string       { return x.prefix + "title" }
func (x linkMetadataFieldPath) Description() string { return x.prefix + "description" }
func (x linkMetadataFieldPath) Image() string       { return x.prefix + "image" }

// FieldPath returns the field path for LinkMetadata
func (x *LinkMetadata) FieldPath() ILinkMetadataFieldPath {
	return NewLinkMetadataFieldPath("")
}

// INodeFieldPath is the interface for the field path of Node
type INodeFieldPath interface {
	String() string
	LineBreakNode() ILineBreakNodeFieldPath
	ParagraphNode() IParagraphNodeFieldPath
	CodeBlockNode() ICodeBlockNodeFieldPath
	HeadingNode() IHeadingNodeFieldPath
	HorizontalRuleNode() IHorizontalRuleNodeFieldPath
	BlockquoteNode() IBlockquoteNodeFieldPath
	ListNode() IListNodeFieldPath
	OrderedListItemNode() IOrderedListItemNodeFieldPath
	UnorderedListItemNode() IUnorderedListItemNodeFieldPath
	TaskListItemNode() ITaskListItemNodeFieldPath
	MathBlockNode() IMathBlockNodeFieldPath
	TableNode() ITableNodeFieldPath
	EmbeddedContentNode() IEmbeddedContentNodeFieldPath
	TextNode() ITextNodeFieldPath
	BoldNode() IBoldNodeFieldPath
	ItalicNode() IItalicNodeFieldPath
	BoldItalicNode() IBoldItalicNodeFieldPath
	CodeNode() ICodeNodeFieldPath
	ImageNode() IImageNodeFieldPath
	LinkNode() ILinkNodeFieldPath
	AutoLinkNode() IAutoLinkNodeFieldPath
	TagNode() ITagNodeFieldPath
	StrikethroughNode() IStrikethroughNodeFieldPath
	EscapingCharacterNode() IEscapingCharacterNodeFieldPath
	MathNode() IMathNodeFieldPath
	HighlightNode() IHighlightNodeFieldPath
	SubscriptNode() ISubscriptNodeFieldPath
	SuperscriptNode() ISuperscriptNodeFieldPath
	ReferencedContentNode() IReferencedContentNodeFieldPath
	SpoilerNode() ISpoilerNodeFieldPath
	HtmlElementNode() IHTMLElementNodeFieldPath
}

// nodeFieldPath is the implementation for the field path of Node
type nodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewNodeFieldPath creates a new nodeFieldPath
func NewNodeFieldPath(fieldPath string) INodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return nodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x nodeFieldPath) String() string { return x.fieldPath }

func (x nodeFieldPath) LineBreakNode() ILineBreakNodeFieldPath {
	return NewLineBreakNodeFieldPath(x.prefix + "line_break_node")
}
func (x nodeFieldPath) ParagraphNode() IParagraphNodeFieldPath {
	return NewParagraphNodeFieldPath(x.prefix + "paragraph_node")
}
func (x nodeFieldPath) CodeBlockNode() ICodeBlockNodeFieldPath {
	return NewCodeBlockNodeFieldPath(x.prefix + "code_block_node")
}
func (x nodeFieldPath) HeadingNode() IHeadingNodeFieldPath {
	return NewHeadingNodeFieldPath(x.prefix + "heading_node")
}
func (x nodeFieldPath) HorizontalRuleNode() IHorizontalRuleNodeFieldPath {
	return NewHorizontalRuleNodeFieldPath(x.prefix + "horizontal_rule_node")
}
func (x nodeFieldPath) BlockquoteNode() IBlockquoteNodeFieldPath {
	return NewBlockquoteNodeFieldPath(x.prefix + "blockquote_node")
}
func (x nodeFieldPath) ListNode() IListNodeFieldPath {
	return NewListNodeFieldPath(x.prefix + "list_node")
}
func (x nodeFieldPath) OrderedListItemNode() IOrderedListItemNodeFieldPath {
	return NewOrderedListItemNodeFieldPath(x.prefix + "ordered_list_item_node")
}
func (x nodeFieldPath) UnorderedListItemNode() IUnorderedListItemNodeFieldPath {
	return NewUnorderedListItemNodeFieldPath(x.prefix + "unordered_list_item_node")
}
func (x nodeFieldPath) TaskListItemNode() ITaskListItemNodeFieldPath {
	return NewTaskListItemNodeFieldPath(x.prefix + "task_list_item_node")
}
func (x nodeFieldPath) MathBlockNode() IMathBlockNodeFieldPath {
	return NewMathBlockNodeFieldPath(x.prefix + "math_block_node")
}
func (x nodeFieldPath) TableNode() ITableNodeFieldPath {
	return NewTableNodeFieldPath(x.prefix + "table_node")
}
func (x nodeFieldPath) EmbeddedContentNode() IEmbeddedContentNodeFieldPath {
	return NewEmbeddedContentNodeFieldPath(x.prefix + "embedded_content_node")
}
func (x nodeFieldPath) TextNode() ITextNodeFieldPath {
	return NewTextNodeFieldPath(x.prefix + "text_node")
}
func (x nodeFieldPath) BoldNode() IBoldNodeFieldPath {
	return NewBoldNodeFieldPath(x.prefix + "bold_node")
}
func (x nodeFieldPath) ItalicNode() IItalicNodeFieldPath {
	return NewItalicNodeFieldPath(x.prefix + "italic_node")
}
func (x nodeFieldPath) BoldItalicNode() IBoldItalicNodeFieldPath {
	return NewBoldItalicNodeFieldPath(x.prefix + "bold_italic_node")
}
func (x nodeFieldPath) CodeNode() ICodeNodeFieldPath {
	return NewCodeNodeFieldPath(x.prefix + "code_node")
}
func (x nodeFieldPath) ImageNode() IImageNodeFieldPath {
	return NewImageNodeFieldPath(x.prefix + "image_node")
}
func (x nodeFieldPath) LinkNode() ILinkNodeFieldPath {
	return NewLinkNodeFieldPath(x.prefix + "link_node")
}
func (x nodeFieldPath) AutoLinkNode() IAutoLinkNodeFieldPath {
	return NewAutoLinkNodeFieldPath(x.prefix + "auto_link_node")
}
func (x nodeFieldPath) TagNode() ITagNodeFieldPath { return NewTagNodeFieldPath(x.prefix + "tag_node") }
func (x nodeFieldPath) StrikethroughNode() IStrikethroughNodeFieldPath {
	return NewStrikethroughNodeFieldPath(x.prefix + "strikethrough_node")
}
func (x nodeFieldPath) EscapingCharacterNode() IEscapingCharacterNodeFieldPath {
	return NewEscapingCharacterNodeFieldPath(x.prefix + "escaping_character_node")
}
func (x nodeFieldPath) MathNode() IMathNodeFieldPath {
	return NewMathNodeFieldPath(x.prefix + "math_node")
}
func (x nodeFieldPath) HighlightNode() IHighlightNodeFieldPath {
	return NewHighlightNodeFieldPath(x.prefix + "highlight_node")
}
func (x nodeFieldPath) SubscriptNode() ISubscriptNodeFieldPath {
	return NewSubscriptNodeFieldPath(x.prefix + "subscript_node")
}
func (x nodeFieldPath) SuperscriptNode() ISuperscriptNodeFieldPath {
	return NewSuperscriptNodeFieldPath(x.prefix + "superscript_node")
}
func (x nodeFieldPath) ReferencedContentNode() IReferencedContentNodeFieldPath {
	return NewReferencedContentNodeFieldPath(x.prefix + "referenced_content_node")
}
func (x nodeFieldPath) SpoilerNode() ISpoilerNodeFieldPath {
	return NewSpoilerNodeFieldPath(x.prefix + "spoiler_node")
}
func (x nodeFieldPath) HtmlElementNode() IHTMLElementNodeFieldPath {
	return NewHTMLElementNodeFieldPath(x.prefix + "html_element_node")
}

// FieldPath returns the field path for Node
func (x *Node) FieldPath() INodeFieldPath {
	return NewNodeFieldPath("")
}

// ILineBreakNodeFieldPath is the interface for the field path of LineBreakNode
type ILineBreakNodeFieldPath interface {
	String() string
}

// lineBreakNodeFieldPath is the implementation for the field path of LineBreakNode
type lineBreakNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewLineBreakNodeFieldPath creates a new lineBreakNodeFieldPath
func NewLineBreakNodeFieldPath(fieldPath string) ILineBreakNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return lineBreakNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x lineBreakNodeFieldPath) String() string { return x.fieldPath }

// FieldPath returns the field path for LineBreakNode
func (x *LineBreakNode) FieldPath() ILineBreakNodeFieldPath {
	return NewLineBreakNodeFieldPath("")
}

// IParagraphNodeFieldPath is the interface for the field path of ParagraphNode
type IParagraphNodeFieldPath interface {
	String() string
	Children() string
}

// paragraphNodeFieldPath is the implementation for the field path of ParagraphNode
type paragraphNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewParagraphNodeFieldPath creates a new paragraphNodeFieldPath
func NewParagraphNodeFieldPath(fieldPath string) IParagraphNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return paragraphNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x paragraphNodeFieldPath) String() string { return x.fieldPath }

func (x paragraphNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for ParagraphNode
func (x *ParagraphNode) FieldPath() IParagraphNodeFieldPath {
	return NewParagraphNodeFieldPath("")
}

// ICodeBlockNodeFieldPath is the interface for the field path of CodeBlockNode
type ICodeBlockNodeFieldPath interface {
	String() string
	Language() string
	Content() string
}

// codeBlockNodeFieldPath is the implementation for the field path of CodeBlockNode
type codeBlockNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewCodeBlockNodeFieldPath creates a new codeBlockNodeFieldPath
func NewCodeBlockNodeFieldPath(fieldPath string) ICodeBlockNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return codeBlockNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x codeBlockNodeFieldPath) String() string { return x.fieldPath }

func (x codeBlockNodeFieldPath) Language() string { return x.prefix + "language" }
func (x codeBlockNodeFieldPath) Content() string  { return x.prefix + "content" }

// FieldPath returns the field path for CodeBlockNode
func (x *CodeBlockNode) FieldPath() ICodeBlockNodeFieldPath {
	return NewCodeBlockNodeFieldPath("")
}

// IHeadingNodeFieldPath is the interface for the field path of HeadingNode
type IHeadingNodeFieldPath interface {
	String() string
	Level() string
	Children() string
}

// headingNodeFieldPath is the implementation for the field path of HeadingNode
type headingNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewHeadingNodeFieldPath creates a new headingNodeFieldPath
func NewHeadingNodeFieldPath(fieldPath string) IHeadingNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return headingNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x headingNodeFieldPath) String() string { return x.fieldPath }

func (x headingNodeFieldPath) Level() string    { return x.prefix + "level" }
func (x headingNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for HeadingNode
func (x *HeadingNode) FieldPath() IHeadingNodeFieldPath {
	return NewHeadingNodeFieldPath("")
}

// IHorizontalRuleNodeFieldPath is the interface for the field path of HorizontalRuleNode
type IHorizontalRuleNodeFieldPath interface {
	String() string
	Symbol() string
}

// horizontalRuleNodeFieldPath is the implementation for the field path of HorizontalRuleNode
type horizontalRuleNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewHorizontalRuleNodeFieldPath creates a new horizontalRuleNodeFieldPath
func NewHorizontalRuleNodeFieldPath(fieldPath string) IHorizontalRuleNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return horizontalRuleNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x horizontalRuleNodeFieldPath) String() string { return x.fieldPath }

func (x horizontalRuleNodeFieldPath) Symbol() string { return x.prefix + "symbol" }

// FieldPath returns the field path for HorizontalRuleNode
func (x *HorizontalRuleNode) FieldPath() IHorizontalRuleNodeFieldPath {
	return NewHorizontalRuleNodeFieldPath("")
}

// IBlockquoteNodeFieldPath is the interface for the field path of BlockquoteNode
type IBlockquoteNodeFieldPath interface {
	String() string
	Children() string
}

// blockquoteNodeFieldPath is the implementation for the field path of BlockquoteNode
type blockquoteNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewBlockquoteNodeFieldPath creates a new blockquoteNodeFieldPath
func NewBlockquoteNodeFieldPath(fieldPath string) IBlockquoteNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return blockquoteNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x blockquoteNodeFieldPath) String() string { return x.fieldPath }

func (x blockquoteNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for BlockquoteNode
func (x *BlockquoteNode) FieldPath() IBlockquoteNodeFieldPath {
	return NewBlockquoteNodeFieldPath("")
}

// IListNodeFieldPath is the interface for the field path of ListNode
type IListNodeFieldPath interface {
	String() string
	Kind() string
	Indent() string
	Children() string
}

// listNodeFieldPath is the implementation for the field path of ListNode
type listNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewListNodeFieldPath creates a new listNodeFieldPath
func NewListNodeFieldPath(fieldPath string) IListNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return listNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x listNodeFieldPath) String() string { return x.fieldPath }

func (x listNodeFieldPath) Kind() string     { return x.prefix + "kind" }
func (x listNodeFieldPath) Indent() string   { return x.prefix + "indent" }
func (x listNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for ListNode
func (x *ListNode) FieldPath() IListNodeFieldPath {
	return NewListNodeFieldPath("")
}

// IOrderedListItemNodeFieldPath is the interface for the field path of OrderedListItemNode
type IOrderedListItemNodeFieldPath interface {
	String() string
	Number() string
	Indent() string
	Children() string
}

// orderedListItemNodeFieldPath is the implementation for the field path of OrderedListItemNode
type orderedListItemNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewOrderedListItemNodeFieldPath creates a new orderedListItemNodeFieldPath
func NewOrderedListItemNodeFieldPath(fieldPath string) IOrderedListItemNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return orderedListItemNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x orderedListItemNodeFieldPath) String() string { return x.fieldPath }

func (x orderedListItemNodeFieldPath) Number() string   { return x.prefix + "number" }
func (x orderedListItemNodeFieldPath) Indent() string   { return x.prefix + "indent" }
func (x orderedListItemNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for OrderedListItemNode
func (x *OrderedListItemNode) FieldPath() IOrderedListItemNodeFieldPath {
	return NewOrderedListItemNodeFieldPath("")
}

// IUnorderedListItemNodeFieldPath is the interface for the field path of UnorderedListItemNode
type IUnorderedListItemNodeFieldPath interface {
	String() string
	Symbol() string
	Indent() string
	Children() string
}

// unorderedListItemNodeFieldPath is the implementation for the field path of UnorderedListItemNode
type unorderedListItemNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewUnorderedListItemNodeFieldPath creates a new unorderedListItemNodeFieldPath
func NewUnorderedListItemNodeFieldPath(fieldPath string) IUnorderedListItemNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return unorderedListItemNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x unorderedListItemNodeFieldPath) String() string { return x.fieldPath }

func (x unorderedListItemNodeFieldPath) Symbol() string   { return x.prefix + "symbol" }
func (x unorderedListItemNodeFieldPath) Indent() string   { return x.prefix + "indent" }
func (x unorderedListItemNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for UnorderedListItemNode
func (x *UnorderedListItemNode) FieldPath() IUnorderedListItemNodeFieldPath {
	return NewUnorderedListItemNodeFieldPath("")
}

// ITaskListItemNodeFieldPath is the interface for the field path of TaskListItemNode
type ITaskListItemNodeFieldPath interface {
	String() string
	Symbol() string
	Indent() string
	Complete() string
	Children() string
}

// taskListItemNodeFieldPath is the implementation for the field path of TaskListItemNode
type taskListItemNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewTaskListItemNodeFieldPath creates a new taskListItemNodeFieldPath
func NewTaskListItemNodeFieldPath(fieldPath string) ITaskListItemNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return taskListItemNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x taskListItemNodeFieldPath) String() string { return x.fieldPath }

func (x taskListItemNodeFieldPath) Symbol() string   { return x.prefix + "symbol" }
func (x taskListItemNodeFieldPath) Indent() string   { return x.prefix + "indent" }
func (x taskListItemNodeFieldPath) Complete() string { return x.prefix + "complete" }
func (x taskListItemNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for TaskListItemNode
func (x *TaskListItemNode) FieldPath() ITaskListItemNodeFieldPath {
	return NewTaskListItemNodeFieldPath("")
}

// IMathBlockNodeFieldPath is the interface for the field path of MathBlockNode
type IMathBlockNodeFieldPath interface {
	String() string
	Content() string
}

// mathBlockNodeFieldPath is the implementation for the field path of MathBlockNode
type mathBlockNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewMathBlockNodeFieldPath creates a new mathBlockNodeFieldPath
func NewMathBlockNodeFieldPath(fieldPath string) IMathBlockNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return mathBlockNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x mathBlockNodeFieldPath) String() string { return x.fieldPath }

func (x mathBlockNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for MathBlockNode
func (x *MathBlockNode) FieldPath() IMathBlockNodeFieldPath {
	return NewMathBlockNodeFieldPath("")
}

// ITableNodeFieldPath is the interface for the field path of TableNode
type ITableNodeFieldPath interface {
	String() string
	Header() string
	Delimiter() string
	Rows() string
}

// tableNodeFieldPath is the implementation for the field path of TableNode
type tableNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewTableNodeFieldPath creates a new tableNodeFieldPath
func NewTableNodeFieldPath(fieldPath string) ITableNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return tableNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x tableNodeFieldPath) String() string { return x.fieldPath }

func (x tableNodeFieldPath) Header() string    { return x.prefix + "header" }
func (x tableNodeFieldPath) Delimiter() string { return x.prefix + "delimiter" }
func (x tableNodeFieldPath) Rows() string      { return x.prefix + "rows" }

// FieldPath returns the field path for TableNode
func (x *TableNode) FieldPath() ITableNodeFieldPath {
	return NewTableNodeFieldPath("")
}

// ITableNode_RowFieldPath is the interface for the field path of TableNode_Row
type ITableNode_RowFieldPath interface {
	String() string
	Cells() string
}

// tableNode_RowFieldPath is the implementation for the field path of TableNode_Row
type tableNode_RowFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewTableNode_RowFieldPath creates a new tableNode_RowFieldPath
func NewTableNode_RowFieldPath(fieldPath string) ITableNode_RowFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return tableNode_RowFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x tableNode_RowFieldPath) String() string { return x.fieldPath }

func (x tableNode_RowFieldPath) Cells() string { return x.prefix + "cells" }

// FieldPath returns the field path for TableNode_Row
func (x *TableNode_Row) FieldPath() ITableNode_RowFieldPath {
	return NewTableNode_RowFieldPath("")
}

// IEmbeddedContentNodeFieldPath is the interface for the field path of EmbeddedContentNode
type IEmbeddedContentNodeFieldPath interface {
	String() string
	ResourceName() string
	Params() string
}

// embeddedContentNodeFieldPath is the implementation for the field path of EmbeddedContentNode
type embeddedContentNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewEmbeddedContentNodeFieldPath creates a new embeddedContentNodeFieldPath
func NewEmbeddedContentNodeFieldPath(fieldPath string) IEmbeddedContentNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return embeddedContentNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x embeddedContentNodeFieldPath) String() string { return x.fieldPath }

func (x embeddedContentNodeFieldPath) ResourceName() string { return x.prefix + "resource_name" }
func (x embeddedContentNodeFieldPath) Params() string       { return x.prefix + "params" }

// FieldPath returns the field path for EmbeddedContentNode
func (x *EmbeddedContentNode) FieldPath() IEmbeddedContentNodeFieldPath {
	return NewEmbeddedContentNodeFieldPath("")
}

// ITextNodeFieldPath is the interface for the field path of TextNode
type ITextNodeFieldPath interface {
	String() string
	Content() string
}

// textNodeFieldPath is the implementation for the field path of TextNode
type textNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewTextNodeFieldPath creates a new textNodeFieldPath
func NewTextNodeFieldPath(fieldPath string) ITextNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return textNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x textNodeFieldPath) String() string { return x.fieldPath }

func (x textNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for TextNode
func (x *TextNode) FieldPath() ITextNodeFieldPath {
	return NewTextNodeFieldPath("")
}

// IBoldNodeFieldPath is the interface for the field path of BoldNode
type IBoldNodeFieldPath interface {
	String() string
	Symbol() string
	Children() string
}

// boldNodeFieldPath is the implementation for the field path of BoldNode
type boldNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewBoldNodeFieldPath creates a new boldNodeFieldPath
func NewBoldNodeFieldPath(fieldPath string) IBoldNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return boldNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x boldNodeFieldPath) String() string { return x.fieldPath }

func (x boldNodeFieldPath) Symbol() string   { return x.prefix + "symbol" }
func (x boldNodeFieldPath) Children() string { return x.prefix + "children" }

// FieldPath returns the field path for BoldNode
func (x *BoldNode) FieldPath() IBoldNodeFieldPath {
	return NewBoldNodeFieldPath("")
}

// IItalicNodeFieldPath is the interface for the field path of ItalicNode
type IItalicNodeFieldPath interface {
	String() string
	Symbol() string
	Content() string
}

// italicNodeFieldPath is the implementation for the field path of ItalicNode
type italicNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewItalicNodeFieldPath creates a new italicNodeFieldPath
func NewItalicNodeFieldPath(fieldPath string) IItalicNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return italicNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x italicNodeFieldPath) String() string { return x.fieldPath }

func (x italicNodeFieldPath) Symbol() string  { return x.prefix + "symbol" }
func (x italicNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for ItalicNode
func (x *ItalicNode) FieldPath() IItalicNodeFieldPath {
	return NewItalicNodeFieldPath("")
}

// IBoldItalicNodeFieldPath is the interface for the field path of BoldItalicNode
type IBoldItalicNodeFieldPath interface {
	String() string
	Symbol() string
	Content() string
}

// boldItalicNodeFieldPath is the implementation for the field path of BoldItalicNode
type boldItalicNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewBoldItalicNodeFieldPath creates a new boldItalicNodeFieldPath
func NewBoldItalicNodeFieldPath(fieldPath string) IBoldItalicNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return boldItalicNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x boldItalicNodeFieldPath) String() string { return x.fieldPath }

func (x boldItalicNodeFieldPath) Symbol() string  { return x.prefix + "symbol" }
func (x boldItalicNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for BoldItalicNode
func (x *BoldItalicNode) FieldPath() IBoldItalicNodeFieldPath {
	return NewBoldItalicNodeFieldPath("")
}

// ICodeNodeFieldPath is the interface for the field path of CodeNode
type ICodeNodeFieldPath interface {
	String() string
	Content() string
}

// codeNodeFieldPath is the implementation for the field path of CodeNode
type codeNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewCodeNodeFieldPath creates a new codeNodeFieldPath
func NewCodeNodeFieldPath(fieldPath string) ICodeNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return codeNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x codeNodeFieldPath) String() string { return x.fieldPath }

func (x codeNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for CodeNode
func (x *CodeNode) FieldPath() ICodeNodeFieldPath {
	return NewCodeNodeFieldPath("")
}

// IImageNodeFieldPath is the interface for the field path of ImageNode
type IImageNodeFieldPath interface {
	String() string
	AltText() string
	Url() string
}

// imageNodeFieldPath is the implementation for the field path of ImageNode
type imageNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewImageNodeFieldPath creates a new imageNodeFieldPath
func NewImageNodeFieldPath(fieldPath string) IImageNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return imageNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x imageNodeFieldPath) String() string { return x.fieldPath }

func (x imageNodeFieldPath) AltText() string { return x.prefix + "alt_text" }
func (x imageNodeFieldPath) Url() string     { return x.prefix + "url" }

// FieldPath returns the field path for ImageNode
func (x *ImageNode) FieldPath() IImageNodeFieldPath {
	return NewImageNodeFieldPath("")
}

// ILinkNodeFieldPath is the interface for the field path of LinkNode
type ILinkNodeFieldPath interface {
	String() string
	Text() string
	Url() string
}

// linkNodeFieldPath is the implementation for the field path of LinkNode
type linkNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewLinkNodeFieldPath creates a new linkNodeFieldPath
func NewLinkNodeFieldPath(fieldPath string) ILinkNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return linkNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x linkNodeFieldPath) String() string { return x.fieldPath }

func (x linkNodeFieldPath) Text() string { return x.prefix + "text" }
func (x linkNodeFieldPath) Url() string  { return x.prefix + "url" }

// FieldPath returns the field path for LinkNode
func (x *LinkNode) FieldPath() ILinkNodeFieldPath {
	return NewLinkNodeFieldPath("")
}

// IAutoLinkNodeFieldPath is the interface for the field path of AutoLinkNode
type IAutoLinkNodeFieldPath interface {
	String() string
	Url() string
	IsRawText() string
}

// autoLinkNodeFieldPath is the implementation for the field path of AutoLinkNode
type autoLinkNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewAutoLinkNodeFieldPath creates a new autoLinkNodeFieldPath
func NewAutoLinkNodeFieldPath(fieldPath string) IAutoLinkNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return autoLinkNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x autoLinkNodeFieldPath) String() string { return x.fieldPath }

func (x autoLinkNodeFieldPath) Url() string       { return x.prefix + "url" }
func (x autoLinkNodeFieldPath) IsRawText() string { return x.prefix + "is_raw_text" }

// FieldPath returns the field path for AutoLinkNode
func (x *AutoLinkNode) FieldPath() IAutoLinkNodeFieldPath {
	return NewAutoLinkNodeFieldPath("")
}

// ITagNodeFieldPath is the interface for the field path of TagNode
type ITagNodeFieldPath interface {
	String() string
	Content() string
}

// tagNodeFieldPath is the implementation for the field path of TagNode
type tagNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewTagNodeFieldPath creates a new tagNodeFieldPath
func NewTagNodeFieldPath(fieldPath string) ITagNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return tagNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x tagNodeFieldPath) String() string { return x.fieldPath }

func (x tagNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for TagNode
func (x *TagNode) FieldPath() ITagNodeFieldPath {
	return NewTagNodeFieldPath("")
}

// IStrikethroughNodeFieldPath is the interface for the field path of StrikethroughNode
type IStrikethroughNodeFieldPath interface {
	String() string
	Content() string
}

// strikethroughNodeFieldPath is the implementation for the field path of StrikethroughNode
type strikethroughNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewStrikethroughNodeFieldPath creates a new strikethroughNodeFieldPath
func NewStrikethroughNodeFieldPath(fieldPath string) IStrikethroughNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return strikethroughNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x strikethroughNodeFieldPath) String() string { return x.fieldPath }

func (x strikethroughNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for StrikethroughNode
func (x *StrikethroughNode) FieldPath() IStrikethroughNodeFieldPath {
	return NewStrikethroughNodeFieldPath("")
}

// IEscapingCharacterNodeFieldPath is the interface for the field path of EscapingCharacterNode
type IEscapingCharacterNodeFieldPath interface {
	String() string
	Symbol() string
}

// escapingCharacterNodeFieldPath is the implementation for the field path of EscapingCharacterNode
type escapingCharacterNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewEscapingCharacterNodeFieldPath creates a new escapingCharacterNodeFieldPath
func NewEscapingCharacterNodeFieldPath(fieldPath string) IEscapingCharacterNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return escapingCharacterNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x escapingCharacterNodeFieldPath) String() string { return x.fieldPath }

func (x escapingCharacterNodeFieldPath) Symbol() string { return x.prefix + "symbol" }

// FieldPath returns the field path for EscapingCharacterNode
func (x *EscapingCharacterNode) FieldPath() IEscapingCharacterNodeFieldPath {
	return NewEscapingCharacterNodeFieldPath("")
}

// IMathNodeFieldPath is the interface for the field path of MathNode
type IMathNodeFieldPath interface {
	String() string
	Content() string
}

// mathNodeFieldPath is the implementation for the field path of MathNode
type mathNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewMathNodeFieldPath creates a new mathNodeFieldPath
func NewMathNodeFieldPath(fieldPath string) IMathNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return mathNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x mathNodeFieldPath) String() string { return x.fieldPath }

func (x mathNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for MathNode
func (x *MathNode) FieldPath() IMathNodeFieldPath {
	return NewMathNodeFieldPath("")
}

// IHighlightNodeFieldPath is the interface for the field path of HighlightNode
type IHighlightNodeFieldPath interface {
	String() string
	Content() string
}

// highlightNodeFieldPath is the implementation for the field path of HighlightNode
type highlightNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewHighlightNodeFieldPath creates a new highlightNodeFieldPath
func NewHighlightNodeFieldPath(fieldPath string) IHighlightNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return highlightNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x highlightNodeFieldPath) String() string { return x.fieldPath }

func (x highlightNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for HighlightNode
func (x *HighlightNode) FieldPath() IHighlightNodeFieldPath {
	return NewHighlightNodeFieldPath("")
}

// ISubscriptNodeFieldPath is the interface for the field path of SubscriptNode
type ISubscriptNodeFieldPath interface {
	String() string
	Content() string
}

// subscriptNodeFieldPath is the implementation for the field path of SubscriptNode
type subscriptNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewSubscriptNodeFieldPath creates a new subscriptNodeFieldPath
func NewSubscriptNodeFieldPath(fieldPath string) ISubscriptNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return subscriptNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x subscriptNodeFieldPath) String() string { return x.fieldPath }

func (x subscriptNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for SubscriptNode
func (x *SubscriptNode) FieldPath() ISubscriptNodeFieldPath {
	return NewSubscriptNodeFieldPath("")
}

// ISuperscriptNodeFieldPath is the interface for the field path of SuperscriptNode
type ISuperscriptNodeFieldPath interface {
	String() string
	Content() string
}

// superscriptNodeFieldPath is the implementation for the field path of SuperscriptNode
type superscriptNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewSuperscriptNodeFieldPath creates a new superscriptNodeFieldPath
func NewSuperscriptNodeFieldPath(fieldPath string) ISuperscriptNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return superscriptNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x superscriptNodeFieldPath) String() string { return x.fieldPath }

func (x superscriptNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for SuperscriptNode
func (x *SuperscriptNode) FieldPath() ISuperscriptNodeFieldPath {
	return NewSuperscriptNodeFieldPath("")
}

// IReferencedContentNodeFieldPath is the interface for the field path of ReferencedContentNode
type IReferencedContentNodeFieldPath interface {
	String() string
	ResourceName() string
	Params() string
}

// referencedContentNodeFieldPath is the implementation for the field path of ReferencedContentNode
type referencedContentNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewReferencedContentNodeFieldPath creates a new referencedContentNodeFieldPath
func NewReferencedContentNodeFieldPath(fieldPath string) IReferencedContentNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return referencedContentNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x referencedContentNodeFieldPath) String() string { return x.fieldPath }

func (x referencedContentNodeFieldPath) ResourceName() string { return x.prefix + "resource_name" }
func (x referencedContentNodeFieldPath) Params() string       { return x.prefix + "params" }

// FieldPath returns the field path for ReferencedContentNode
func (x *ReferencedContentNode) FieldPath() IReferencedContentNodeFieldPath {
	return NewReferencedContentNodeFieldPath("")
}

// ISpoilerNodeFieldPath is the interface for the field path of SpoilerNode
type ISpoilerNodeFieldPath interface {
	String() string
	Content() string
}

// spoilerNodeFieldPath is the implementation for the field path of SpoilerNode
type spoilerNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewSpoilerNodeFieldPath creates a new spoilerNodeFieldPath
func NewSpoilerNodeFieldPath(fieldPath string) ISpoilerNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return spoilerNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x spoilerNodeFieldPath) String() string { return x.fieldPath }

func (x spoilerNodeFieldPath) Content() string { return x.prefix + "content" }

// FieldPath returns the field path for SpoilerNode
func (x *SpoilerNode) FieldPath() ISpoilerNodeFieldPath {
	return NewSpoilerNodeFieldPath("")
}

// IHTMLElementNodeFieldPath is the interface for the field path of HTMLElementNode
type IHTMLElementNodeFieldPath interface {
	String() string
	TagName() string
	Attributes() string
}

// hTMLElementNodeFieldPath is the implementation for the field path of HTMLElementNode
type hTMLElementNodeFieldPath struct {
	fieldPath string // the field path to the current field, empty if it's root
	prefix    string // e.g. "fieldPath." or empty if it's root
}

// NewHTMLElementNodeFieldPath creates a new hTMLElementNodeFieldPath
func NewHTMLElementNodeFieldPath(fieldPath string) IHTMLElementNodeFieldPath {
	prefix := ""
	if fieldPath != "" {
		prefix = fieldPath + "."
	}
	return hTMLElementNodeFieldPath{fieldPath: fieldPath, prefix: prefix}
}

// String returns the field path
func (x hTMLElementNodeFieldPath) String() string { return x.fieldPath }

func (x hTMLElementNodeFieldPath) TagName() string    { return x.prefix + "tag_name" }
func (x hTMLElementNodeFieldPath) Attributes() string { return x.prefix + "attributes" }

// FieldPath returns the field path for HTMLElementNode
func (x *HTMLElementNode) FieldPath() IHTMLElementNodeFieldPath {
	return NewHTMLElementNodeFieldPath("")
}
