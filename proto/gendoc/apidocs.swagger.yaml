swagger: "2.0"
info:
  title: api/v1/common/common.proto
  version: version not set
tags:
  - name: UserService
  - name: AuthService
  - name: MarkdownService
  - name: ResourceService
  - name: MemoService
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/auth/signin:
    post:
      summary: SignIn signs in the user with the given username and password.
      operationId: AuthService_SignIn
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUser'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The username to sign in with.
          in: query
          required: false
          type: string
        - name: password
          description: The password to sign in with.
          in: query
          required: false
          type: string
        - name: neverExpire
          description: Whether the session should never expire.
          in: query
          required: false
          type: boolean
      tags:
        - AuthService
  /api/v1/auth/signin/sso:
    post:
      summary: SignInWithSSO signs in the user with the given SSO code.
      operationId: AuthService_SignInWithSSO
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUser'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: idpId
          description: The ID of the SSO provider.
          in: query
          required: false
          type: integer
          format: int32
        - name: code
          description: The code to sign in with.
          in: query
          required: false
          type: string
        - name: redirectUri
          description: The redirect URI.
          in: query
          required: false
          type: string
      tags:
        - AuthService
  /api/v1/auth/signout:
    post:
      summary: SignOut signs out the user.
      operationId: AuthService_SignOut
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - AuthService
  /api/v1/auth/signup:
    post:
      summary: SignUp signs up the user with the given username and password.
      operationId: AuthService_SignUp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUser'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: username
          description: The username to sign up with.
          in: query
          required: false
          type: string
        - name: password
          description: The password to sign up with.
          in: query
          required: false
          type: string
      tags:
        - AuthService
  /api/v1/auth/status:
    post:
      summary: GetAuthStatus returns the current auth status of the user.
      operationId: AuthService_GetAuthStatus
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUser'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - AuthService
  /api/v1/markdown/link:metadata:
    get:
      summary: GetLinkMetadata returns metadata for a given link.
      operationId: MarkdownService_GetLinkMetadata
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/markdownLinkMetadata'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: link
          in: query
          required: false
          type: string
      tags:
        - MarkdownService
  /api/v1/markdown/node:restore:
    post:
      summary: RestoreMarkdownNodes restores the given nodes to markdown content.
      operationId: MarkdownService_RestoreMarkdownNodes
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/markdownRestoreMarkdownNodesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/markdownRestoreMarkdownNodesRequest'
      tags:
        - MarkdownService
  /api/v1/markdown/node:stringify:
    post:
      summary: StringifyMarkdownNodes stringify the given nodes to plain text content.
      operationId: MarkdownService_StringifyMarkdownNodes
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/markdownStringifyMarkdownNodesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/markdownStringifyMarkdownNodesRequest'
      tags:
        - MarkdownService
  /api/v1/markdown:parse:
    post:
      summary: ParseMarkdown parses the given markdown content and returns a list of nodes.
      operationId: MarkdownService_ParseMarkdown
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/markdownParseMarkdownResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/markdownParseMarkdownRequest'
      tags:
        - MarkdownService
  /api/v1/memos:
    get:
      summary: ListMemos lists memos with pagination and filter.
      operationId: MemoService_ListMemos
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/memosListMemosResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pageSize
          description: The maximum number of memos to return.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: |-
            A page token, received from a previous `ListMemos` call.
            Provide this to retrieve the subsequent page.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter is used to filter memos returned in the list.
            Format: "creator == 'users/{uid}' && visibilities == ['PUBLIC', 'PROTECTED']"
          in: query
          required: false
          type: string
        - name: view
          description: |-
            The view of the memo.

             - MEMO_VIEW_FULL: The full view of the memo. Includes all fields.
             - MEMO_VIEW_METADATA_ONLY: The metadata only view of the memo. Excludes the content/snippet fields.
          in: query
          required: false
          type: string
          enum:
            - MEMO_VIEW_UNSPECIFIED
            - MEMO_VIEW_FULL
            - MEMO_VIEW_METADATA_ONLY
          default: MEMO_VIEW_UNSPECIFIED
      tags:
        - MemoService
    post:
      summary: CreateMemo creates a memo.
      operationId: MemoService_CreateMemo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1memosMemo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/memosCreateMemoRequest'
      tags:
        - MemoService
  /api/v1/memos:by-uid/{uid}:
    get:
      summary: GetMemoByUid gets a memo by uid
      operationId: MemoService_GetMemoByUid
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1memosMemo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: uid
          description: The uid of the memo.
          in: path
          required: true
          type: string
      tags:
        - MemoService
  /api/v1/reactions/{reactionId}:
    delete:
      summary: DeleteMemoReaction deletes a reaction for a memo.
      operationId: MemoService_DeleteMemoReaction
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: reactionId
          in: path
          required: true
          type: integer
          format: int32
      tags:
        - MemoService
  /api/v1/resources:
    get:
      summary: ListResources lists all resources.
      operationId: ResourceService_ListResources
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/resourcesListResourcesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - ResourceService
    post:
      summary: CreateResource creates a new resource.
      operationId: ResourceService_CreateResource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/resourcesResource'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: resource
          in: body
          required: true
          schema:
            $ref: '#/definitions/resourcesResource'
      tags:
        - ResourceService
  /api/v1/resources:by-uid/{uid}:
    get:
      summary: GetResourceByUid returns a resource by uid.
      operationId: ResourceService_GetResourceByUid
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/resourcesResource'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: uid
          description: The uid of the resource.
          in: path
          required: true
          type: string
      tags:
        - ResourceService
  /api/v1/users:
    get:
      summary: ListUsers returns a list of users.
      operationId: UserService_ListUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersListUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - UserService
    post:
      summary: CreateUser creates a new user.
      operationId: UserService_CreateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUser'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/usersUser'
      tags:
        - UserService
  /api/v1/users:search:
    get:
      summary: SearchUsers searches users by filter.
      operationId: UserService_SearchUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersSearchUsersResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: filter
          description: |-
            Filter is used to filter users returned in the list.
            Format: "username == 'frank'"
          in: query
          required: false
          type: string
      tags:
        - UserService
  /api/v1/{memo.name}:
    patch:
      summary: UpdateMemo updates a memo.
      operationId: MemoService_UpdateMemo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1memosMemo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: memo.name
          description: |-
            The name of the memo.
            Format: memos/{id}
            id is the system generated id.
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
        - name: memo
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                description: The user defined id of the memo.
              rowStatus:
                $ref: '#/definitions/commonRowStatus'
              creator:
                type: string
                title: |-
                  The name of the creator.
                  Format: users/{id}
              createTime:
                type: string
                format: date-time
              updateTime:
                type: string
                format: date-time
              displayTime:
                type: string
                format: date-time
              content:
                type: string
              nodes:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/markdownNode'
                readOnly: true
              visibility:
                $ref: '#/definitions/memosVisibility'
              tags:
                type: array
                items:
                  type: string
              pinned:
                type: boolean
              resources:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/resourcesResource'
              relations:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/memosMemoRelation'
              reactions:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/memosReaction'
                readOnly: true
              property:
                $ref: '#/definitions/memosMemoProperty'
                readOnly: true
              parent:
                type: string
                title: |-
                  The name of the parent memo.
                  Format: memos/{id}
                readOnly: true
              snippet:
                type: string
                description: The snippet of the memo content. Plain text only.
                readOnly: true
              location:
                $ref: '#/definitions/v1memosLocation'
                description: The location of the memo.
      tags:
        - MemoService
  /api/v1/{name_1}:
    get:
      summary: GetResource returns a resource by name.
      operationId: ResourceService_GetResource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/resourcesResource'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name_1
          description: |-
            The name of the resource.
            Format: resources/{id}
            id is the system generated unique identifier.
          in: path
          required: true
          type: string
          pattern: resources/[^/]+
      tags:
        - ResourceService
    delete:
      summary: DeleteResource deletes a resource by name.
      operationId: ResourceService_DeleteResource
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name_1
          description: |-
            The name of the resource.
            Format: resources/{id}
            id is the system generated unique identifier.
          in: path
          required: true
          type: string
          pattern: resources/[^/]+
      tags:
        - ResourceService
  /api/v1/{name_2}:
    get:
      summary: GetMemo gets a memo.
      operationId: MemoService_GetMemo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1memosMemo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name_2
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
      tags:
        - MemoService
    delete:
      summary: DeleteMemo deletes a memo.
      operationId: MemoService_DeleteMemo
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name_2
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
      tags:
        - MemoService
  /api/v1/{name}:
    get:
      summary: GetUser gets a user by name.
      operationId: UserService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUser'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
      tags:
        - UserService
    delete:
      summary: DeleteUser deletes a user.
      operationId: UserService_DeleteUser
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
      tags:
        - UserService
  /api/v1/{name}/access_tokens:
    get:
      summary: ListUserAccessTokens returns a list of access tokens for a user.
      operationId: UserService_ListUserAccessTokens
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersListUserAccessTokensResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
      tags:
        - UserService
    post:
      summary: CreateUserAccessToken creates a new access token for a user.
      operationId: UserService_CreateUserAccessToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUserAccessToken'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserServiceCreateUserAccessTokenBody'
      tags:
        - UserService
  /api/v1/{name}/access_tokens/{accessToken}:
    delete:
      summary: DeleteUserAccessToken deletes an access token for a user.
      operationId: UserService_DeleteUserAccessToken
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: accessToken
          description: access_token is the access token to delete.
          in: path
          required: true
          type: string
      tags:
        - UserService
  /api/v1/{name}/comments:
    get:
      summary: ListMemoComments lists comments for a memo.
      operationId: MemoService_ListMemoComments
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/memosListMemoCommentsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
      tags:
        - MemoService
    post:
      summary: CreateMemoComment creates a comment for a memo.
      operationId: MemoService_CreateMemoComment
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1memosMemo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
        - name: comment
          in: body
          required: true
          schema:
            $ref: '#/definitions/memosCreateMemoRequest'
      tags:
        - MemoService
  /api/v1/{name}/reactions:
    get:
      summary: ListMemoReactions lists reactions for a memo.
      operationId: MemoService_ListMemoReactions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/memosListMemoReactionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
      tags:
        - MemoService
    post:
      summary: UpsertMemoReaction upserts a reaction for a memo.
      operationId: MemoService_UpsertMemoReaction
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/memosReaction'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MemoServiceUpsertMemoReactionBody'
      tags:
        - MemoService
  /api/v1/{name}/relations:
    get:
      summary: ListMemoRelations lists relations for a memo.
      operationId: MemoService_ListMemoRelations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/memosListMemoRelationsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
      tags:
        - MemoService
    patch:
      summary: SetMemoRelations sets relations for a memo.
      operationId: MemoService_SetMemoRelations
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MemoServiceSetMemoRelationsBody'
      tags:
        - MemoService
  /api/v1/{name}/resources:
    get:
      summary: ListMemoResources lists resources for a memo.
      operationId: MemoService_ListMemoResources
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/memosListMemoResourcesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
      tags:
        - MemoService
    patch:
      summary: SetMemoResources sets resources for a memo.
      operationId: MemoService_SetMemoResources
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the memo.
            Format: memos/{id}
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MemoServiceSetMemoResourcesBody'
      tags:
        - MemoService
  /api/v1/{name}/setting:
    get:
      summary: GetUserSetting gets the setting of a user.
      operationId: UserService_GetUserSetting
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1usersUserSetting'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
      tags:
        - UserService
  /api/v1/{parent}/tags/{tag}:
    delete:
      summary: DeleteMemoTag deletes a tag for a memo.
      operationId: MemoService_DeleteMemoTag
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: parent
          description: |-
            The parent, who owns the tags.
            Format: memos/{id}. Use "memos/-" to delete all tags.
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
        - name: tag
          in: path
          required: true
          type: string
        - name: deleteRelatedMemos
          in: query
          required: false
          type: boolean
      tags:
        - MemoService
  /api/v1/{parent}/tags:rename:
    patch:
      summary: RenameMemoTag renames a tag for a memo.
      operationId: MemoService_RenameMemoTag
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: parent
          description: |-
            The parent, who owns the tags.
            Format: memos/{id}. Use "memos/-" to rename all tags.
          in: path
          required: true
          type: string
          pattern: memos/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MemoServiceRenameMemoTagBody'
      tags:
        - MemoService
  /api/v1/{resource.name}:
    patch:
      summary: UpdateResource updates a resource.
      operationId: ResourceService_UpdateResource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/resourcesResource'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: resource.name
          description: |-
            The name of the resource.
            Format: resources/{id}
            id is the system generated unique identifier.
          in: path
          required: true
          type: string
          pattern: resources/[^/]+
        - name: resource
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                description: The user defined id of the resource.
              createTime:
                type: string
                format: date-time
                readOnly: true
              filename:
                type: string
              content:
                type: string
                format: byte
              externalLink:
                type: string
              type:
                type: string
              size:
                type: string
                format: int64
              memo:
                type: string
                title: |-
                  The related memo.
                  Format: memos/{id}
      tags:
        - ResourceService
  /api/v1/{setting.name}:
    patch:
      summary: UpdateUserSetting updates the setting of a user.
      operationId: UserService_UpdateUserSetting
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1usersUserSetting'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: setting.name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+/setting
        - name: setting
          in: body
          required: true
          schema:
            type: object
            properties:
              locale:
                type: string
                description: The preferred locale of the user.
              appearance:
                type: string
                description: The preferred appearance of the user.
              memoVisibility:
                type: string
                description: The default visibility of the memo.
      tags:
        - UserService
  /api/v1/{user.name}:
    patch:
      summary: UpdateUser updates a user.
      operationId: UserService_UpdateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersUser'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user.name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: user
          in: body
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int32
                description: The system generated uid of the user.
              role:
                $ref: '#/definitions/UserRole'
              username:
                type: string
              email:
                type: string
              nickname:
                type: string
              avatarUrl:
                type: string
              description:
                type: string
              password:
                type: string
              rowStatus:
                $ref: '#/definitions/commonRowStatus'
              createTime:
                type: string
                format: date-time
              updateTime:
                type: string
                format: date-time
      tags:
        - UserService
  /file/{name}/avatar:
    get:
      summary: GetUserAvatarBinary gets the avatar of a user.
      operationId: UserService_GetUserAvatarBinary
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the user.
            Format: users/{id}
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: httpBody.contentType
          description: The HTTP Content-Type header value specifying the content type of the body.
          in: query
          required: false
          type: string
        - name: httpBody.data
          description: The HTTP request/response body as raw binary.
          in: query
          required: false
          type: string
          format: byte
      tags:
        - UserService
  /file/{name}/{filename}:
    get:
      summary: GetResourceBinary returns a resource binary by name.
      operationId: ResourceService_GetResourceBinary
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The name of the resource.
            Format: resources/{id}
            id is the system generated unique identifier.
          in: path
          required: true
          type: string
          pattern: resources/[^/]+
        - name: filename
          description: The filename of the resource. Mainly used for downloading.
          in: path
          required: true
          type: string
        - name: thumbnail
          description: A flag indicating if the thumbnail version of the resource should be returned
          in: query
          required: false
          type: boolean
      tags:
        - ResourceService
definitions:
  ListNodeKind:
    type: string
    enum:
      - KIND_UNSPECIFIED
      - ORDERED
      - UNORDERED
      - DESCRIPTION
    default: KIND_UNSPECIFIED
  MemoServiceRenameMemoTagBody:
    type: object
    properties:
      oldTag:
        type: string
      newTag:
        type: string
  MemoServiceSetMemoRelationsBody:
    type: object
    properties:
      relations:
        type: array
        items:
          type: object
          $ref: '#/definitions/memosMemoRelation'
  MemoServiceSetMemoResourcesBody:
    type: object
    properties:
      resources:
        type: array
        items:
          type: object
          $ref: '#/definitions/resourcesResource'
  MemoServiceUpsertMemoReactionBody:
    type: object
    properties:
      reaction:
        $ref: '#/definitions/memosReaction'
  TableNodeRow:
    type: object
    properties:
      cells:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  UserRole:
    type: string
    enum:
      - ROLE_UNSPECIFIED
      - HOST
      - ADMIN
      - USER
    default: ROLE_UNSPECIFIED
  UserServiceCreateUserAccessTokenBody:
    type: object
    properties:
      description:
        type: string
      expiresAt:
        type: string
        format: date-time
  apiHttpBody:
    type: object
    properties:
      contentType:
        type: string
        description: The HTTP Content-Type header value specifying the content type of the body.
      data:
        type: string
        format: byte
        description: The HTTP request/response body as raw binary.
      extensions:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
        description: |-
          Application specific response metadata. Must be set in the first response
          for streaming APIs.
    description: |-
      Message that represents an arbitrary HTTP body. It should only be used for
      payload formats that can't be represented as JSON, such as raw binary or
      an HTML page.


      This message can be used both in streaming and non-streaming API methods in
      the request as well as the response.

      It can be used as a top-level request field, which is convenient if one
      wants to extract parameters from either the URL or HTTP template into the
      request fields and also want access to the raw HTTP body.

      Example:

          message GetResourceRequest {
            // A unique request id.
            string request_id = 1;

            // The raw HTTP body is bound to this field.
            google.api.HttpBody http_body = 2;

          }

          service ResourceService {
            rpc GetResource(GetResourceRequest)
              returns (google.api.HttpBody);
            rpc UpdateResource(google.api.HttpBody)
              returns (google.protobuf.Empty);

          }

      Example with streaming methods:

          service CaldavService {
            rpc GetCalendar(stream google.api.HttpBody)
              returns (stream google.api.HttpBody);
            rpc UpdateCalendar(stream google.api.HttpBody)
              returns (stream google.api.HttpBody);

          }

      Use of this type only changes how the request and response bodies are
      handled, all other features will continue to work unchanged.
  commonRowStatus:
    type: string
    enum:
      - ROW_STATUS_UNSPECIFIED
      - ACTIVE
      - ARCHIVED
    default: ROW_STATUS_UNSPECIFIED
  markdownAutoLinkNode:
    type: object
    properties:
      url:
        type: string
      isRawText:
        type: boolean
  markdownBlockquoteNode:
    type: object
    properties:
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownBoldItalicNode:
    type: object
    properties:
      symbol:
        type: string
      content:
        type: string
  markdownBoldNode:
    type: object
    properties:
      symbol:
        type: string
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownCodeBlockNode:
    type: object
    properties:
      language:
        type: string
      content:
        type: string
  markdownCodeNode:
    type: object
    properties:
      content:
        type: string
  markdownEmbeddedContentNode:
    type: object
    properties:
      resourceName:
        type: string
      params:
        type: string
  markdownEscapingCharacterNode:
    type: object
    properties:
      symbol:
        type: string
  markdownHTMLElementNode:
    type: object
    properties:
      tagName:
        type: string
      attributes:
        type: object
        additionalProperties:
          type: string
  markdownHeadingNode:
    type: object
    properties:
      level:
        type: integer
        format: int32
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownHighlightNode:
    type: object
    properties:
      content:
        type: string
  markdownHorizontalRuleNode:
    type: object
    properties:
      symbol:
        type: string
  markdownImageNode:
    type: object
    properties:
      altText:
        type: string
      url:
        type: string
  markdownItalicNode:
    type: object
    properties:
      symbol:
        type: string
      content:
        type: string
  markdownLineBreakNode:
    type: object
  markdownLinkMetadata:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      image:
        type: string
  markdownLinkNode:
    type: object
    properties:
      text:
        type: string
      url:
        type: string
  markdownListNode:
    type: object
    properties:
      kind:
        $ref: '#/definitions/ListNodeKind'
      indent:
        type: integer
        format: int32
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownMathBlockNode:
    type: object
    properties:
      content:
        type: string
  markdownMathNode:
    type: object
    properties:
      content:
        type: string
  markdownNode:
    type: object
    properties:
      type:
        $ref: '#/definitions/markdownNodeType'
      lineBreakNode:
        $ref: '#/definitions/markdownLineBreakNode'
        description: Block nodes.
      paragraphNode:
        $ref: '#/definitions/markdownParagraphNode'
      codeBlockNode:
        $ref: '#/definitions/markdownCodeBlockNode'
      headingNode:
        $ref: '#/definitions/markdownHeadingNode'
      horizontalRuleNode:
        $ref: '#/definitions/markdownHorizontalRuleNode'
      blockquoteNode:
        $ref: '#/definitions/markdownBlockquoteNode'
      listNode:
        $ref: '#/definitions/markdownListNode'
      orderedListItemNode:
        $ref: '#/definitions/markdownOrderedListItemNode'
      unorderedListItemNode:
        $ref: '#/definitions/markdownUnorderedListItemNode'
      taskListItemNode:
        $ref: '#/definitions/markdownTaskListItemNode'
      mathBlockNode:
        $ref: '#/definitions/markdownMathBlockNode'
      tableNode:
        $ref: '#/definitions/markdownTableNode'
      embeddedContentNode:
        $ref: '#/definitions/markdownEmbeddedContentNode'
      textNode:
        $ref: '#/definitions/markdownTextNode'
        description: Inline nodes.
      boldNode:
        $ref: '#/definitions/markdownBoldNode'
      italicNode:
        $ref: '#/definitions/markdownItalicNode'
      boldItalicNode:
        $ref: '#/definitions/markdownBoldItalicNode'
      codeNode:
        $ref: '#/definitions/markdownCodeNode'
      imageNode:
        $ref: '#/definitions/markdownImageNode'
      linkNode:
        $ref: '#/definitions/markdownLinkNode'
      autoLinkNode:
        $ref: '#/definitions/markdownAutoLinkNode'
      tagNode:
        $ref: '#/definitions/markdownTagNode'
      strikethroughNode:
        $ref: '#/definitions/markdownStrikethroughNode'
      escapingCharacterNode:
        $ref: '#/definitions/markdownEscapingCharacterNode'
      mathNode:
        $ref: '#/definitions/markdownMathNode'
      highlightNode:
        $ref: '#/definitions/markdownHighlightNode'
      subscriptNode:
        $ref: '#/definitions/markdownSubscriptNode'
      superscriptNode:
        $ref: '#/definitions/markdownSuperscriptNode'
      referencedContentNode:
        $ref: '#/definitions/markdownReferencedContentNode'
      spoilerNode:
        $ref: '#/definitions/markdownSpoilerNode'
      htmlElementNode:
        $ref: '#/definitions/markdownHTMLElementNode'
  markdownNodeType:
    type: string
    enum:
      - NODE_UNSPECIFIED
      - LINE_BREAK
      - PARAGRAPH
      - CODE_BLOCK
      - HEADING
      - HORIZONTAL_RULE
      - BLOCKQUOTE
      - LIST
      - ORDERED_LIST_ITEM
      - UNORDERED_LIST_ITEM
      - TASK_LIST_ITEM
      - MATH_BLOCK
      - TABLE
      - EMBEDDED_CONTENT
      - TEXT
      - BOLD
      - ITALIC
      - BOLD_ITALIC
      - CODE
      - IMAGE
      - LINK
      - AUTO_LINK
      - TAG
      - STRIKETHROUGH
      - ESCAPING_CHARACTER
      - MATH
      - HIGHLIGHT
      - SUBSCRIPT
      - SUPERSCRIPT
      - REFERENCED_CONTENT
      - SPOILER
      - HTML_ELEMENT
    default: NODE_UNSPECIFIED
    description: |2-
       - LINE_BREAK: Block nodes.
       - TEXT: Inline nodes.
  markdownOrderedListItemNode:
    type: object
    properties:
      number:
        type: string
      indent:
        type: integer
        format: int32
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownParagraphNode:
    type: object
    properties:
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownParseMarkdownRequest:
    type: object
    properties:
      markdown:
        type: string
  markdownParseMarkdownResponse:
    type: object
    properties:
      nodes:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownReferencedContentNode:
    type: object
    properties:
      resourceName:
        type: string
      params:
        type: string
  markdownRestoreMarkdownNodesRequest:
    type: object
    properties:
      nodes:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownRestoreMarkdownNodesResponse:
    type: object
    properties:
      markdown:
        type: string
  markdownSpoilerNode:
    type: object
    properties:
      content:
        type: string
  markdownStrikethroughNode:
    type: object
    properties:
      content:
        type: string
  markdownStringifyMarkdownNodesRequest:
    type: object
    properties:
      nodes:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownStringifyMarkdownNodesResponse:
    type: object
    properties:
      plainText:
        type: string
  markdownSubscriptNode:
    type: object
    properties:
      content:
        type: string
  markdownSuperscriptNode:
    type: object
    properties:
      content:
        type: string
  markdownTableNode:
    type: object
    properties:
      header:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
      delimiter:
        type: array
        items:
          type: string
      rows:
        type: array
        items:
          type: object
          $ref: '#/definitions/TableNodeRow'
  markdownTagNode:
    type: object
    properties:
      content:
        type: string
  markdownTaskListItemNode:
    type: object
    properties:
      symbol:
        type: string
      indent:
        type: integer
        format: int32
      complete:
        type: boolean
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  markdownTextNode:
    type: object
    properties:
      content:
        type: string
  markdownUnorderedListItemNode:
    type: object
    properties:
      symbol:
        type: string
      indent:
        type: integer
        format: int32
      children:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
  memosCreateMemoRequest:
    type: object
    properties:
      content:
        type: string
      visibility:
        $ref: '#/definitions/memosVisibility'
      resources:
        type: array
        items:
          type: object
          $ref: '#/definitions/resourcesResource'
      relations:
        type: array
        items:
          type: object
          $ref: '#/definitions/memosMemoRelation'
      location:
        $ref: '#/definitions/v1memosLocation'
  memosListMemoCommentsResponse:
    type: object
    properties:
      memos:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1memosMemo'
  memosListMemoReactionsResponse:
    type: object
    properties:
      reactions:
        type: array
        items:
          type: object
          $ref: '#/definitions/memosReaction'
  memosListMemoRelationsResponse:
    type: object
    properties:
      relations:
        type: array
        items:
          type: object
          $ref: '#/definitions/memosMemoRelation'
  memosListMemoResourcesResponse:
    type: object
    properties:
      resources:
        type: array
        items:
          type: object
          $ref: '#/definitions/resourcesResource'
  memosListMemosResponse:
    type: object
    properties:
      memos:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1memosMemo'
      nextPageToken:
        type: string
        description: |-
          A token, which can be sent as `page_token` to retrieve the next page.
          If this field is omitted, there are no subsequent pages.
  memosMemoProperty:
    type: object
    properties:
      tags:
        type: array
        items:
          type: string
      hasLink:
        type: boolean
      hasTaskList:
        type: boolean
      hasCode:
        type: boolean
      hasIncompleteTasks:
        type: boolean
  memosMemoRelation:
    type: object
    properties:
      memo:
        $ref: '#/definitions/memosMemoRelationMemo'
        title: |-
          The name of memo.
          Format: "memos/{uid}"
      relatedMemo:
        $ref: '#/definitions/memosMemoRelationMemo'
        title: |-
          The name of related memo.
          Format: "memos/{uid}"
      type:
        $ref: '#/definitions/memosMemoRelationType'
  memosMemoRelationMemo:
    type: object
    properties:
      name:
        type: string
        title: |-
          The name of the memo.
          Format: memos/{id}
      uid:
        type: string
      snippet:
        type: string
        description: The snippet of the memo content. Plain text only.
        readOnly: true
  memosMemoRelationType:
    type: string
    enum:
      - TYPE_UNSPECIFIED
      - REFERENCE
      - COMMENT
    default: TYPE_UNSPECIFIED
  memosMemoView:
    type: string
    enum:
      - MEMO_VIEW_UNSPECIFIED
      - MEMO_VIEW_FULL
      - MEMO_VIEW_METADATA_ONLY
    default: MEMO_VIEW_UNSPECIFIED
    description: |2-
       - MEMO_VIEW_FULL: The full view of the memo. Includes all fields.
       - MEMO_VIEW_METADATA_ONLY: The metadata only view of the memo. Excludes the content/snippet fields.
  memosReaction:
    type: object
    properties:
      id:
        type: integer
        format: int32
      creator:
        type: string
        title: |-
          The name of the creator.
          Format: users/{id}
      contentId:
        type: string
      reactionType:
        type: string
  memosVisibility:
    type: string
    enum:
      - VISIBILITY_UNSPECIFIED
      - PRIVATE
      - PROTECTED
      - PUBLIC
    default: VISIBILITY_UNSPECIFIED
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  resourcesListResourcesResponse:
    type: object
    properties:
      resources:
        type: array
        items:
          type: object
          $ref: '#/definitions/resourcesResource'
  resourcesResource:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the resource.
          Format: resources/{id}
          id is the system generated unique identifier.
      uid:
        type: string
        description: The user defined id of the resource.
      createTime:
        type: string
        format: date-time
        readOnly: true
      filename:
        type: string
      content:
        type: string
        format: byte
      externalLink:
        type: string
      type:
        type: string
      size:
        type: string
        format: int64
      memo:
        type: string
        title: |-
          The related memo.
          Format: memos/{id}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  usersListUserAccessTokensResponse:
    type: object
    properties:
      accessTokens:
        type: array
        items:
          type: object
          $ref: '#/definitions/usersUserAccessToken'
  usersListUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/usersUser'
  usersSearchUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/usersUser'
  usersUser:
    type: object
    properties:
      name:
        type: string
        title: |-
          The name of the user.
          Format: users/{id}
      id:
        type: integer
        format: int32
        description: The system generated uid of the user.
      role:
        $ref: '#/definitions/UserRole'
      username:
        type: string
      email:
        type: string
      nickname:
        type: string
      avatarUrl:
        type: string
      description:
        type: string
      password:
        type: string
      rowStatus:
        $ref: '#/definitions/commonRowStatus'
      createTime:
        type: string
        format: date-time
      updateTime:
        type: string
        format: date-time
  usersUserAccessToken:
    type: object
    properties:
      accessToken:
        type: string
      description:
        type: string
      issuedAt:
        type: string
        format: date-time
      expiresAt:
        type: string
        format: date-time
  v1memosLocation:
    type: object
    properties:
      placeholder:
        type: string
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
  v1memosMemo:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the memo.
          Format: memos/{id}
          id is the system generated id.
      uid:
        type: string
        description: The user defined id of the memo.
      rowStatus:
        $ref: '#/definitions/commonRowStatus'
      creator:
        type: string
        title: |-
          The name of the creator.
          Format: users/{id}
      createTime:
        type: string
        format: date-time
      updateTime:
        type: string
        format: date-time
      displayTime:
        type: string
        format: date-time
      content:
        type: string
      nodes:
        type: array
        items:
          type: object
          $ref: '#/definitions/markdownNode'
        readOnly: true
      visibility:
        $ref: '#/definitions/memosVisibility'
      tags:
        type: array
        items:
          type: string
      pinned:
        type: boolean
      resources:
        type: array
        items:
          type: object
          $ref: '#/definitions/resourcesResource'
      relations:
        type: array
        items:
          type: object
          $ref: '#/definitions/memosMemoRelation'
      reactions:
        type: array
        items:
          type: object
          $ref: '#/definitions/memosReaction'
        readOnly: true
      property:
        $ref: '#/definitions/memosMemoProperty'
        readOnly: true
      parent:
        type: string
        title: |-
          The name of the parent memo.
          Format: memos/{id}
        readOnly: true
      snippet:
        type: string
        description: The snippet of the memo content. Plain text only.
        readOnly: true
      location:
        $ref: '#/definitions/v1memosLocation'
        description: The location of the memo.
  v1usersUserSetting:
    type: object
    properties:
      name:
        type: string
        title: |-
          The name of the user.
          Format: users/{id}
      locale:
        type: string
        description: The preferred locale of the user.
      appearance:
        type: string
        description: The preferred appearance of the user.
      memoVisibility:
        type: string
        description: The default visibility of the memo.
